OBJECT Dataport 50030 ACS_Syst_CHAMP Import EURO/USD
{
  OBJECT-PROPERTIES
  {
    Date=06.04.16;
    Time=09:39:13;
    Modified=Yes;
    Version List=Fertig!!!;
  }
  PROPERTIES
  {
    OnPreDataport=BEGIN
                    // Excel Datei Definitionen ******************************************************************
                    // *******************************************************************************************

                    CLEAR(Quelle_Excel);
                    CLEAR(Quelle_Sheet);
                    CLEAR(Quelle_Book);

                    ge„nderte_eintr„ge := 0;
                    obsolete_eintr„ge := 0;
                    excel_datens„tze := 0;

                    auswahl := STRMENU(Text100,5);
                    IF auswahl = 0 THEN
                      EXIT;

                    // Definiert die zu importierende Datei
                    IF CREATE (Quelle_Excel,FALSE) THEN BEGIN END ELSE ERROR('Cannot start Excel Application.');
                    Quelle_Book := Quelle_Excel.Workbooks._Open(CurrDataport.FILENAME,0,FALSE); //Kein Schreibschutz
                    Quelle_j:='1';


                    //CHAMPS oder ACTS
                    IF (auswahl = 1) OR (auswahl = 2) THEN
                      BEGIN

                        //********************************************************************************************
                        //                         Eigentliches Update der CHAMP Artikel
                        //********************************************************************************************

                        Quelle_Sheet := Quelle_Excel.Worksheets.Item('Einspielen');

                        excel_datens„tze := Quelle_Sheet.UsedRange.Rows.Count;
                        PL_W„h := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_W„h+Quelle_j).Value));
                        EVALUATE(v_art,FORMAT(Quelle_Sheet.Range(Spalte_Art+Quelle_j).Value));

                        IF (auswahl = 1) AND (FORMAT(v_art) <> 'Champs') THEN ERROR('Falsche Syntax in Liste');
                        IF (auswahl = 2) AND (FORMAT(v_art) <> 'ACTS') THEN ERROR('Falsche Syntax in Liste');

                        IF excel_datens„tze > 999 THEN
                          BEGIN
                            IF CONFIRM('Es konnte mehr als 1000 Eintr„ge in der Quelldatei gefunden werden.\' +
                                       'Soll der Status Update letzte Preisliste fr alle Artikel zurckgesetzt und neu ' +
                                       'bewertet werden?',TRUE) THEN
                              BEGIN
                                Servicepreise.RESET;
                                IF auswahl = 1 THEN
                                  Servicepreise.SETRANGE(Art,Servicepreise.Art :: Champs);
                                IF auswahl = 2 THEN
                                  Servicepreise.SETRANGE(Art,Servicepreise.Art :: ACTS);
                                Servicepreise.SETRANGE(W„hrungscode,PL_W„h);
                                IF Servicepreise.FINDFIRST THEN
                                  Servicepreise.MODIFYALL("Update letzte Preisliste",FALSE);
                              END;
                          END;

                        REPEAT

                            excel_msrp := 0;

                            Artikelname := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value));
                            ServiceArtikelname := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_Serviceartikelnr+Quelle_j).Value));
                            SUPArtikelname := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_SUP+Quelle_j).Value));
                            IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> '' THEN
                              excel_msrp := Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value;
                            PL_Version := Quelle_Sheet.Range(Spalte_PL_Version+Quelle_j).Value;

                           IF Artikelname = '' THEN
                             BEGIN
                             END
                           ELSE
                             BEGIN
                               //Kennzeichnung der alten Pos., dass die Zuordnung obsolete geworden ist, da Champ Artikelnr. ge„ndert wurde
                               Artikelnr_obsolete.RESET;
                               IF auswahl = 1 THEN
                                 Artikelnr_obsolete.SETFILTER(Art,'%1',Artikelnr_obsolete.Art :: Champs);
                               IF auswahl = 2 THEN
                                 Artikelnr_obsolete.SETFILTER(Art,'%1',Artikelnr_obsolete.Art :: ACTS);
                               Artikelnr_obsolete.SETFILTER("Artikelnr. 2",'%1',Artikelname);
                               Artikelnr_obsolete.SETFILTER("SUP Artikelnr.",'%1',SUPArtikelname);
                               Artikelnr_obsolete.SETFILTER(W„hrungscode,'%1',PL_W„h);
                               Artikelnr_obsolete.SETFILTER("Zuordnung obsolete",'%1',FALSE);
                               IF Artikelnr_obsolete.FINDFIRST THEN
                                 REPEAT
                                   IF Artikelnr_obsolete."Service Artikelnr." <> ServiceArtikelname THEN
                                     BEGIN
                                       Artikelnr_obsolete."Zuordnung obsolete" := TRUE;
                                       Artikelnr_obsolete.MODIFY(TRUE);
                                       obsolete_eintr„ge += 1;
                                       Quelle_Sheet.Range('K'+Quelle_j).Value := FORMAT(Quelle_Sheet.Range('K'+Quelle_j).Value) +
                                       Artikelnr_obsolete."Service Artikelnr." + ';';
                                     END;
                                 UNTIL Artikelnr_obsolete.NEXT = 0;

                               Servicepreise.RESET;
                               IF auswahl = 1 THEN
                                 Servicepreise.SETFILTER(Art,'%1',Servicepreise.Art :: Champs);
                               IF auswahl = 2 THEN
                                 Servicepreise.SETFILTER(Art,'%1',Servicepreise.Art :: ACTS);
                               Servicepreise.SETFILTER("Artikelnr. 2",'%1',Artikelname);
                               Servicepreise.SETFILTER("Service Artikelnr.",'%1',ServiceArtikelname);
                               Servicepreise.SETFILTER("SUP Artikelnr.",'%1',SUPArtikelname);
                               Servicepreise.SETFILTER(W„hrungscode,'%1',PL_W„h);
                               IF Servicepreise.FINDFIRST THEN
                                 BEGIN
                                   IF (Servicepreise.MSRP <> ROUND(excel_msrp,0.01)) AND (excel_msrp <> 0) THEN
                                     BEGIN
                                       ge„nderte_eintr„ge += 1;
                                       Servicepreise.MSRP := ROUND(excel_msrp,0.01);
                                       Servicepreise.MODIFY(TRUE);
                                     END;
                                   Servicepreise."Update letzte Preisliste" := TRUE;
                                   Servicepreise.Preisliste := Quelle_Sheet.Range(Spalte_PL_Version+Quelle_j).Value;
                                   IF Servicepreise."Zuordnung obsolete" = TRUE THEN
                                     BEGIN
                                       Servicepreise."Zuordnung obsolete" := FALSE;
                                       obsolete_korrigiert += 1;
                                       Quelle_Sheet.Range('L'+Quelle_j).Value := 'obsolete korrigiert';
                                     END;
                                   Servicepreise.MODIFY;
                                 END
                               ELSE
                                 BEGIN
                                   Servicepreise.INIT;
                                   Servicepreise."Service Artikelnr." := FORMAT(Quelle_Sheet.Range(Spalte_Serviceartikelnr+Quelle_j).Value);
                                   Servicepreise."SUP Artikelnr." := FORMAT(Quelle_Sheet.Range(Spalte_SUP+Quelle_j).Value);
                                   Artikel.RESET;
                                   Artikel.SETFILTER("No. 2",'%1',FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value));
                                   IF Artikel.FINDFIRST THEN
                                     BEGIN
                                       Servicepreise.VALIDATE("Artikelnr.",Artikel."No.");
                                     END
                                   ELSE
                                     BEGIN
                                       //Servicepreise."Artikelnr." := FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value);
                                       Servicepreise."Artikelnr. 2" := FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value);
                                     END;
                                   Servicepreise.MSRP := ROUND(excel_msrp,0.01);
                                   Servicepreise."Update letzte Preisliste" := TRUE;
                                   Servicepreise.Preisliste := Quelle_Sheet.Range(Spalte_PL_Version+Quelle_j).Value;
                                   Servicepreise.W„hrungscode := PL_W„h;
                                   Servicepreise."Laufzeit in Jahren" := Quelle_Sheet.Range(Spalte_YR+Quelle_j).Value;
                                   IF auswahl = 1 THEN
                                     Servicepreise.Art := Servicepreise.Art :: Champs;
                                   IF auswahl = 2 THEN
                                     Servicepreise.Art := Servicepreise.Art :: ACTS;
                                   Servicepreise.INSERT(TRUE);
                                   ge„nderte_eintr„ge += 1;
                                 END;

                             END;

                          //*********************************************************************************************
                          // Abbruchbedingung
                          // Wenn in der Quelldatei 15 Leere Zeilen hintereinander kommen, ist das Dateiende erreicht
                          IF Artikelname = '' THEN                                       // erkennt das Ende der Excel Datei
                             BEGIN
                               leere_zeilen := leere_zeilen+1;
                             END
                             ELSE
                             BEGIN
                               leere_zeilen :=0;
                             END;

                          Quelle_j:=INCSTR(Quelle_j);                                                 // n„chste Zeile Importdatei

                        UNTIL (Max_Datens„tze = Quelle_j) OR (leere_zeilen = 15);  // Nach 15 Zeilen ohne Artikel ist Schluss

                        //Quelle_Book.Save;
                        Quelle_Book.Close(TRUE);
                        Quelle_Excel.Quit;

                        CLEAR(Quelle_Sheet);
                        CLEAR(Quelle_Book);
                        CLEAR(Quelle_Excel);

                        //REPEAT
                        //UNTIL ISCLEAR(Quelle_Excel) AND ISCLEAR(Quelle_Book) AND ISCLEAR(Quelle_Sheet);
                      END;


                    //Systeme MSRP
                    IF auswahl = 3 THEN
                      BEGIN

                        Quelle_Sheet := Quelle_Excel.Worksheets.Item('Einspielen');

                        //Fhrende Einkaufsw„hrung
                        system_ek_w„hrung := '';

                        Quelle_j := '2';
                        excel_datens„tze := Quelle_Sheet.UsedRange.Rows.Count;
                        PL_W„h := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_W„h_Systeme+Quelle_j).Value));

                        IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+'1').Value) <> 'MSRP' THEN
                          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_MSRP + ' muss MSRP sein.');
                        IF FORMAT(Quelle_Sheet.Range(Spalte_DC_Systeme+'1').Value) <> 'DC' THEN
                          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_DC_Systeme + ' muss DC sein.');

                        IF (excel_datens„tze > 499) AND (PL_W„h = system_ek_w„hrung) THEN
                          BEGIN
                            IF CONFIRM('Es konnte mehr als 500 Eintr„ge in der Quelldatei gefunden werden.\' +
                                       'Soll der Status Update letzte Preisliste fr alle Artikel zurckgesetzt und neu ' +
                                       'bewertet werden?',TRUE) THEN
                            Artikel.RESET;
                            Artikel.SETFILTER("Manufacturer Code",'%1','59');
                            IF Artikel.FINDFIRST THEN
                              Artikel.MODIFYALL(Artikel."Update letzte Preisliste",FALSE);
                          END;

                        REPEAT

                          excel_dc := 0;
                          excel_msrp := 0;
                          EOL := FALSE;

                          Artikelname := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value));
                          IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> 'EOL' THEN
                            BEGIN
                              IF FORMAT(Quelle_Sheet.Range(Spalte_DC_Systeme+Quelle_j).Value) <> '' THEN
                                excel_dc := Quelle_Sheet.Range(Spalte_DC_Systeme+Quelle_j).Value;
                              excel_dc := ROUND(excel_dc,0.01);
                              IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> '' THEN
                                excel_msrp := Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value;
                              excel_msrp := ROUND(excel_msrp,0.01);
                            END
                          ELSE
                            EOL := TRUE;

                          //Ausnahme EMS/UPG/TO-ACSRVR
                          CASE Artikelname OF
                            'EMS/UPG/TO-ACSRVR' :
                            BEGIN
                              excel_dc := excel_msrp;
                              excel_msrp := 0;
                            END;
                          END;

                          PL_W„h := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_W„h_Systeme+Quelle_j).Value));
                          IF FORMAT(Quelle_Sheet.Range(Spalte_Startdatum+Quelle_j).Value) <> '' THEN
                          startdatum := Quelle_Sheet.Range(Spalte_Startdatum+Quelle_j).Value;
                          IF Artikelname <> '' THEN
                            PL_Version_Systeme := FORMAT(Quelle_Sheet.Range(Spalte_PL_Version_Systeme+Quelle_j).Value);

                          IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN
                            BEGIN
                            END
                          ELSE
                            BEGIN
                              Kreditor.GET(Kred);
                              IF PL_W„h = system_ek_w„hrung THEN
                                IF PL_W„h <> Kreditor."Currency Code" THEN
                                  ERROR(Text001,Kred);

                              Artikel.RESET;
                              Artikel.SETFILTER("No. 2",'%1',Artikelname);
                              IF Artikel.FINDFIRST THEN
                                BEGIN

                                  //*********************************************************************************************
                                  //                                    EK-Preise updaten
                                  //*********************************************************************************************

                                  IF PL_W„h = system_ek_w„hrung THEN
                                    BEGIN
                                      einkaufspreis.RESET;
                                      einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                                      einkaufspreis.SETFILTER("Vendor No.",'%1',Kred);
                                      einkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                                      einkaufspreis.SETFILTER("Ending Date",'%1',0D);
                                      einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                                      IF einkaufspreis.FINDFIRST THEN
                                        BEGIN
                                          einkaufspreis."Ending Date" := startdatum - 1;
                                          einkaufspreis.MODIFY(TRUE);
                                        END;

                                      IF (excel_dc <> 0) THEN
                                        BEGIN
                                          einkaufspreis.RESET;
                                          einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                                          einkaufspreis.SETFILTER("Vendor No.",'%1',Kred);
                                          einkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                                          einkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                                          IF NOT einkaufspreis.FINDFIRST THEN
                                            BEGIN
                                              einkaufspreis.INIT;
                                              einkaufspreis."Item No." := Artikel."No.";
                                              einkaufspreis."Vendor No." := Kred;
                                              einkaufspreis."Starting Date" := startdatum;
                                              einkaufspreis."Currency Code" := PL_W„h;
                                              einkaufspreis."Unit of Measure Code" := 'STšCK';
                                              einkaufspreis."Direct Unit Cost" := excel_dc;
                                              einkaufspreis.INSERT(TRUE);
                                              ge„nderte_eintr„ge += 1;
                                           END
                                         ELSE
                                           BEGIN
                                             //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                                             IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN
                                               BEGIN
                                                 einkaufspreis."Direct Unit Cost" := excel_dc;
                                                 einkaufspreis.MODIFY;
                                                 ge„nderte_eintr„ge += 1;
                                               END;
                                           END;

                                        END;

                                      Artikel."Update letzte Preisliste" := TRUE;
                                      Artikel.MODIFY(TRUE);

                                    END;

                                  //*********************************************************************************************
                                  //                                    VK-Preise updaten
                                  //*********************************************************************************************

                                  verkaufspreis.RESET;
                                  verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type" :: "All Customers");
                                  verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                                  verkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                                  verkaufspreis.SETFILTER("Ending Date",'%1',0D);
                                  verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                                  IF verkaufspreis.FINDFIRST THEN
                                    BEGIN
                                      verkaufspreis."Ending Date" := startdatum - 1;
                                      verkaufspreis.MODIFY(TRUE);
                                    END;

                                  IF excel_msrp <> 0 THEN
                                    BEGIN
                                      verkaufspreis.RESET;
                                      verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type" :: "All Customers");
                                      verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                                      verkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                                      verkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                                      IF NOT verkaufspreis.FINDFIRST THEN
                                        BEGIN
                                          verkaufspreis.INIT;
                                          verkaufspreis."Sales Type" := verkaufspreis."Sales Type" :: "All Customers";
                                          verkaufspreis."Item No.":= Artikel."No.";
                                          verkaufspreis."Starting Date" := startdatum;
                                          verkaufspreis."Currency Code" := PL_W„h;
                                          verkaufspreis."Unit of Measure Code" := 'STšCK';
                                          verkaufspreis."Unit Price" := excel_msrp;
                                          verkaufspreis.INSERT(TRUE);
                                        END;
                                    END;

                                  IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
                                  OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
                                  OR (Artikel.Bezeichnung2_lang = '') THEN
                                    BEGIN
                                      Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                                      Artikel.MODIFY(TRUE);
                                    END;

                                  IF EOL THEN
                                    IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                                      Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
                                END;

                            END;

                         //*********************************************************************************************
                         // Abbruchbedingung
                         // Wenn in der Quelldatei 15 Leere Zeilen hintereinander kommen, ist das Dateiende erreicht
                         IF Artikelname = '' THEN                                       // erkennt das Ende der Excel Datei
                            BEGIN
                              leere_zeilen := leere_zeilen+1;
                            END
                            ELSE
                            BEGIN
                              leere_zeilen :=0;
                            END;

                         Quelle_j:=INCSTR(Quelle_j);                                                 // n„chste Zeile Importdatei

                       UNTIL (Max_Datens„tze = Quelle_j) OR (leere_zeilen = 10);  // Nach 10 Zeilen ohne Artikel ist Schluss

                       Artikel.RESET;
                       Artikel.SETFILTER("Manufacturer Code",'%1','59');
                       Artikel.SETFILTER("Update letzte Preisliste",'%1',FALSE);
                       Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*'+'Nicht in der Preisliste' + '*','*' +'Stand Preisliste' + '*');
                       IF Artikel.FINDFIRST THEN
                         Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');

                        Quelle_Book.Close(FALSE);
                        Quelle_Excel.Quit;

                       CLEAR(Quelle_Sheet);
                       CLEAR(Quelle_Book);
                       CLEAR(Quelle_Excel);

                       //REPEAT
                       //UNTIL ISCLEAR(Quelle_Excel) AND ISCLEAR(Quelle_Book) AND ISCLEAR(Quelle_Sheet);

                      END;

                    //Systeme MSRP Schaeffler
                    IF auswahl = 4 THEN
                      BEGIN

                        Quelle_Sheet := Quelle_Excel.Worksheets.Item('Einspielen');

                        Quelle_j := '2';
                        excel_datens„tze := Quelle_Sheet.UsedRange.Rows.Count;
                        PL_W„h := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_W„h_Systeme+Quelle_j).Value));

                        IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+'1').Value) <> 'MSRP' THEN
                          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_MSRP + ' muss MSRP sein.');
                        IF FORMAT(Quelle_Sheet.Range(Spalte_DC_Systeme+'1').Value) <> 'DC' THEN
                          ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_DC_Systeme + ' muss DC sein.');

                        REPEAT

                          excel_dc := 0;
                          excel_msrp := 0;
                          EOL := FALSE;

                          Artikelname := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value));
                          IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> 'EOS' THEN
                            BEGIN
                              IF FORMAT(Quelle_Sheet.Range(Spalte_DC_Systeme+Quelle_j).Value) <> '' THEN
                                excel_dc := Quelle_Sheet.Range(Spalte_DC_Systeme+Quelle_j).Value;
                              excel_dc := ROUND(excel_dc,0.01);
                              IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> '' THEN
                                excel_msrp := Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value;
                              excel_msrp := ROUND(excel_msrp,0.01);
                            END
                          ELSE
                            EOL := TRUE;

                          PL_W„h := UPPERCASE(FORMAT(Quelle_Sheet.Range(Spalte_W„h_Systeme+Quelle_j).Value));
                          IF FORMAT(Quelle_Sheet.Range(Spalte_Startdatum+Quelle_j).Value) <> '' THEN
                          startdatum := Quelle_Sheet.Range(Spalte_Startdatum+Quelle_j).Value;
                          IF Artikelname <> '' THEN
                            PL_Version_Systeme := FORMAT(Quelle_Sheet.Range(Spalte_PL_Version_Systeme+Quelle_j).Value);

                          IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN
                            BEGIN
                            END
                          ELSE
                            BEGIN
                              Kreditor.GET(Kred_EURO);
                              IF PL_W„h = 'USD' THEN
                                IF PL_W„h <> Kreditor."Currency Code" THEN
                                  ERROR(Text001,Kred_EURO);

                              Artikel.RESET;
                              Artikel.SETFILTER("No. 2",'%1',Artikelname);
                              IF Artikel.FINDFIRST THEN
                                BEGIN

                                  //*********************************************************************************************
                                  //                                    EK-Preise updaten
                                  //*********************************************************************************************

                                  IF PL_W„h = '' THEN
                                    BEGIN
                                      einkaufspreis.RESET;
                                      einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                                      einkaufspreis.SETFILTER("Vendor No.",'%1',Kred_EURO);
                                      einkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                                      einkaufspreis.SETFILTER("Ending Date",'%1',0D);
                                      einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                                      IF einkaufspreis.FINDFIRST THEN
                                        BEGIN
                                          einkaufspreis."Ending Date" := startdatum - 1;
                                          einkaufspreis.MODIFY(TRUE);
                                        END;

                                      IF (excel_dc <> 0) THEN
                                        BEGIN
                                          einkaufspreis.RESET;
                                          einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                                          einkaufspreis.SETFILTER("Vendor No.",'%1',Kred_EURO);
                                          einkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                                          einkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                                          IF NOT einkaufspreis.FINDFIRST THEN
                                            BEGIN
                                              einkaufspreis.INIT;
                                              einkaufspreis."Item No." := Artikel."No.";
                                              einkaufspreis."Vendor No." := Kred_EURO;
                                              einkaufspreis."Starting Date" := startdatum;
                                              einkaufspreis."Currency Code" := PL_W„h;
                                              einkaufspreis."Unit of Measure Code" := 'STšCK';
                                              einkaufspreis."Direct Unit Cost" := excel_dc;
                                              einkaufspreis.INSERT(TRUE);
                                              ge„nderte_eintr„ge += 1;
                                           END
                                         ELSE
                                           BEGIN
                                             //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                                             IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN
                                               BEGIN
                                                 einkaufspreis."Direct Unit Cost" := excel_dc;
                                                 einkaufspreis.MODIFY;
                                                 ge„nderte_eintr„ge += 1;
                                               END;
                                           END;

                                        END;

                                      Artikel."Update letzte Preisliste" := TRUE;
                                      Artikel.MODIFY(TRUE);

                                    END;

                                  //*********************************************************************************************
                                  //                                    VK-Preise updaten
                                  //*********************************************************************************************

                                  verkaufspreis.RESET;
                                  verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type" :: "All Customers");
                                  verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                                  verkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                                  verkaufspreis.SETFILTER("Ending Date",'%1',0D);
                                  verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                                  IF verkaufspreis.FINDFIRST THEN
                                    BEGIN
                                      verkaufspreis."Ending Date" := startdatum - 1;
                                      verkaufspreis.MODIFY(TRUE);
                                    END;

                                  IF excel_msrp <> 0 THEN
                                    BEGIN
                                      verkaufspreis.RESET;
                                      verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type" :: "All Customers");
                                      verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                                      verkaufspreis.SETFILTER("Currency Code",'%1',PL_W„h);
                                      verkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                                      IF NOT verkaufspreis.FINDFIRST THEN
                                        BEGIN
                                          verkaufspreis.INIT;
                                          verkaufspreis."Sales Type" := verkaufspreis."Sales Type" :: "All Customers";
                                          verkaufspreis."Item No.":= Artikel."No.";
                                          verkaufspreis."Starting Date" := startdatum;
                                          verkaufspreis."Currency Code" := PL_W„h;
                                          verkaufspreis."Unit of Measure Code" := 'STšCK';
                                          verkaufspreis."Unit Price" := excel_msrp;
                                          verkaufspreis.INSERT(TRUE);
                                        END;
                                    END;

                                  IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
                                  OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
                                  OR (Artikel.Bezeichnung2_lang = '') THEN
                                    BEGIN
                                      Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                                      Artikel.MODIFY(TRUE);
                                    END;

                                  IF EOL THEN
                                    IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                                      Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
                                END;

                            END;

                         //*********************************************************************************************
                         // Abbruchbedingung
                         // Wenn in der Quelldatei 15 Leere Zeilen hintereinander kommen, ist das Dateiende erreicht
                         IF Artikelname = '' THEN                                       // erkennt das Ende der Excel Datei
                            BEGIN
                              leere_zeilen := leere_zeilen+1;
                            END
                            ELSE
                            BEGIN
                              leere_zeilen :=0;
                            END;

                         Quelle_j:=INCSTR(Quelle_j);                                                 // n„chste Zeile Importdatei

                       UNTIL (Max_Datens„tze = Quelle_j) OR (leere_zeilen = 10);  // Nach 10 Zeilen ohne Artikel ist Schluss

                       { // Nach Rckstellung auf 4.7.04 von 4.8.11.1 gibt es hier Probleme, da er auch alle anderen Artikel anfassen wrde
                       Artikel.RESET;
                       Artikel.SETFILTER("Manufacturer Code",'%1','59');
                       Artikel.SETFILTER("Update letzte Preisliste",'%1',FALSE);
                       Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*'+'Nicht in der Preisliste' + '*','*' +'Stand Preisliste' + '*');
                       IF Artikel.FINDFIRST THEN
                         Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');
                       }

                       Quelle_Book.Close(FALSE);
                       Quelle_Excel.Quit;

                       CLEAR(Quelle_Sheet);
                       CLEAR(Quelle_Book);
                       CLEAR(Quelle_Excel);

                       //REPEAT
                       //UNTIL ISCLEAR(Quelle_Excel) AND ISCLEAR(Quelle_Book) AND ISCLEAR(Quelle_Sheet);

                      END;
                  END;

    OnPostDataport=VAR
                     Datum_date@1140001 : Date;
                     Datum_text@1140000 : Text[30];
                   BEGIN
                     IF PL_W„h = '' THEN
                       w„h_text := 'EURO';
                     IF PL_W„h = 'USD' THEN
                       w„h_text := 'USD';

                     CASE auswahl OF
                      1: pl_bezeichnung := 'CHAMPS ' + w„h_text;
                      2: pl_bezeichnung := 'ACTS ' + w„h_text;
                      3: pl_bezeichnung := 'System ' + w„h_text;
                     END;

                     MESSAGE('Import der %1 Artikel abgeschlossen.'+ '\' + 'Neue bzw. ge„nderte Datens„tze: %2\\'+
                             'Excel Datens„tze: %3\Obsolete Bezeichnungen: %4 (korrigiert: %5)'
                             ,pl_bezeichnung,ge„nderte_eintr„ge,excel_datens„tze,obsolete_eintr„ge,obsolete_korrigiert);
                   END;

  }
  DATAITEMS
  {
  }
  REQUESTFORM
  {
    PROPERTIES
    {
      Width=9020;
      Height=3410;
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR

      Spalte_Part@1140001 : TextConst
        'DEU=A';

      Spalte_Serviceartikelnr@1140002 : TextConst
        'DEU=B';

      Spalte_MSRP@1140005 : TextConst
        'DEU=C';

      Spalte_YR@1140007 : TextConst
        'DEU=D';

      Spalte_SUP_lang@1140008 : TextConst
        'DEU=E';

      Spalte_SUP@1140009 : TextConst
        'DEU=F';
      Servicepreise@1140003 : Record 50028;
      Artikelnr_obsolete@1140014 : Record 50028;
      einkaufspreis@1140031 : Record 7012;
      verkaufspreis@1140041 : Record 7002;
      Artikel@1140036 : Record 27;
      Kreditor@1140038 : Record 23;
      Quelle_Excel@1140020 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      Quelle_Book@1140019 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";
      Quelle_Sheet@1140017 : Automation "{00020813-0000-0000-C000-000000000046} 1.2:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      Quelle_j@1140016 : Text[7];

      Spalte_PL_Version@1140023 : TextConst
        'DEU=G';

      Spalte_W„h@1140006 : TextConst
        'DEU=H';

      Spalte_Art@1140039 : TextConst
        'DEU=I';

      Spalte_DC_Systeme@1140018 : TextConst
        'DEU=D';

      Spalte_W„h_Systeme@1140030 : TextConst
        'DEU=E';

      Spalte_Startdatum@1140033 : TextConst
        'DEU=F';

      Spalte_PL_Version_Systeme@1140042 : TextConst
        'DEU=G';

      Kred@1140034 : TextConst
        'DEU=880045';

      Kred_EURO@1140029 : TextConst
        'DEU=880045';

      Max_Datens„tze@1140064 : TextConst
        'DEU=40000';

      Text000@1140037 : TextConst
        'DEU=Fehler in der Syntax der Quelldatei.\Spalte: %1';
      Artikelname@1140000 : Text[120];
      ServiceArtikelname@1140011 : Text[50];
      SUPArtikelname@1140012 : Text[50];
      PL_Version@1140024 : Text[30];
      PL_Version_Systeme@1140043 : Text[30];
      PL_W„h@1140025 : Code[20];
      excel_msrp@1140004 : Decimal;
      excel_dc@1140010 : Decimal;
      w„h_text@1140046 : Text[30];
      startdatum@1140032 : Date;
      a@1140073 : Integer;
      leere_zeilen@1140055 : Integer;
      excel_datens„tze@1140021 : Integer;
      ge„nderte_eintr„ge@1140013 : Integer;
      obsolete_eintr„ge@1140022 : Integer;
      update_job@1140015 : Boolean;
      pl_bezeichnung@1140045 : Text[30];
      auswahl@1140026 : 'Champs,ACTS,Systeme,Systeme Schaeffler';
      strmenu@1140027 : Dialog;

      Text001@1140035 : TextConst
        'DEU=Der W„hrungscode des Kreditors %1 und der in der Excel Liste angebene W„hrungscode weichen voneinander ab.';

      Text100@1140028 : TextConst
        'DEU=CHAMPS Import,ACTS / ACTS Schaeffler Import,Systemartikel DC und MSRP Import,Schaeffler Systemartikel DC und MSRP Import';
      v_art@1140040 : 'Champs,ACTS';
      EOL@1140044 : Boolean;
      system_ek_w„hrung@1140047 : Code[20];
      obsolete_korrigiert@1140048 : Integer;

    EVENT Quelle_Sheet@1140017::SelectionChange@1543(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::BeforeDoubleClick@1537(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::BeforeRightClick@1534(Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::Activate@304();
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::Deactivate@1530();
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::Calculate@279();
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::Change@1545(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::FollowHyperlink@1470(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Hyperlink");
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::PivotTableUpdate@2156(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::PivotTableAfterValueChange@2886(TargetPivotTable@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";TargetRange@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::PivotTableBeforeAllocateChange@2889(TargetPivotTable@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable";ValueChangeStart@1140002 : Integer;ValueChangeEnd@1140001 : Integer;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Sheet@1140017::PivotTableChangeSync@2894(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::Open@1923();
    BEGIN
    END;

    EVENT Quelle_Book@1140019::Activate@304();
    BEGIN
    END;

    EVENT Quelle_Book@1140019::Deactivate@1530();
    BEGIN
    END;

    EVENT Quelle_Book@1140019::BeforeClose@1546(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::BeforeSave@1547(SaveAsUI@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::BeforePrint@1549(VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::NewSheet@1550(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::AddinInstall@1552();
    BEGIN
    END;

    EVENT Quelle_Book@1140019::AddinUninstall@1553();
    BEGIN
    END;

    EVENT Quelle_Book@1140019::WindowResize@1554(Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::WindowActivate@1556(Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::WindowDeactivate@1557(Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::SheetSelectionChange@1558(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::SheetBeforeDoubleClick@1559(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::SheetBeforeRightClick@1560(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::SheetActivate@1561(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::SheetDeactivate@1562(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::SheetCalculate@1563(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::SheetChange@1564(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::SheetFollowHyperlink@1854(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Hyperlink");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::PivotTableCloseConnection@2158(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::PivotTableOpenConnection@2159(Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Quelle_Book@1140019::Sync@2266(SyncEventType@1140000 : Integer);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::BeforeXmlImport@2283(Map@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";Url@1140002 : Text[1024];IsRefresh@1140001 : Boolean;VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::AfterXmlImport@2285(Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";IsRefresh@1140001 : Boolean;Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::BeforeXmlExport@2287(Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";Url@1140001 : Text[1024];VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::AfterXmlExport@2288(Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";Url@1140001 : Text[1024];Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::RowsetComplete@2610(Description@1140002 : Text[1024];Sheet@1140001 : Text[1024];Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::AfterSave@2900(Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Book@1140019::NewChart@2901(Ch@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Chart");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::NewWorkbook@1565(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::SheetSelectionChange@1558(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::SheetBeforeDoubleClick@1559(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::SheetBeforeRightClick@1560(Sh@1140002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::SheetActivate@1561(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::SheetDeactivate@1562(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::SheetCalculate@1563(Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::SheetChange@1564(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020846-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Range");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookOpen@1567(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookActivate@1568(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookDeactivate@1569(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookBeforeClose@1570(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";VAR Cancel@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookNewSheet@1573(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Sh@1140000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookAddinInstall@1574(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookAddinUninstall@1575(Wb@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WindowResize@1554(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WindowActivate@1556(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WindowDeactivate@1557(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Wn@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020893-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Window");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::SheetFollowHyperlink@1854(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00024431-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Hyperlink");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::SheetPivotTableUpdate@2157(Sh@1140001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookPivotTableOpenConnecti@2161(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Target@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020872-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.PivotTable");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookSync@2289(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";SyncEventType@1140000 : Integer);
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookAfterXmlImport@2291(Wb@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Map@1140002 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{0002447B-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.XmlMap";IsRefresh@1140001 : Boolean;Result@1140000 : Integer);
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookRowsetComplete@2611(Wb@1140003 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Description@1140002 : Text[1024];Sheet@1140001 : Text[1024];Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::AfterCalculate@2612();
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::ProtectedViewWindowOpen@2903(Pvw@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{000244CD-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.ProtectedViewWindow");
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookAfterSave@2911(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Success@1140000 : Boolean);
    BEGIN
    END;

    EVENT Quelle_Excel@1140020::WorkbookNewChart@2912(Wb@1140001 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020819-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Workbook";Ch@1140000 : Automation "{00020813-0000-0000-C000-000000000046} 1.7:{00020821-0000-0000-C000-000000000046}:'Microsoft Excel 14.0 Object Library'.Chart");
    BEGIN
    END;

    BEGIN
    END.
  }
}

