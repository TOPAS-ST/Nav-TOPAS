
Documentation()

OnRun()

Zähle_Service_detailiert(Klasse : 'Einzelgerät,Mehrgeräte';Export : Boolean)
//***************************************************************************************************
//    Zählt verschiedene Statistiken zu den Wartungsverträgen z.B. wieviele velängert wurden etc.
//***************************************************************************************************

IF Export THEN
  BEGIN
    InfoFileF.TEXTMODE := TRUE;
    InfoFileF.CREATE('C:\Temp\Service_Verlängerungen_alle.txt');
    InfoFileF2.TEXTMODE := TRUE;
    InfoFileF2.CREATE('C:\Temp\Service_Verlängerungen_mehrmals.txt');
    InfoFileF.OPEN('C:\Temp\Service_Verlängerungen.txt');
    "CR+LF"[2]:=10;
  END;

Window.OPEN('Wartungsvertrag #1######');
Wartungsvertrag.RESET;
//Wartungsvertrag.SETFILTER(Inaktiv,'%1',FALSE);
IF Klasse = Klasse :: Einzelgerät THEN
  Wartungsvertrag.SETFILTER(Klasse,'%1',Wartungsvertrag.Klasse :: Einzelgerät);
IF Klasse = Klasse :: Mehrgeräte THEN
  Wartungsvertrag.SETFILTER(Klasse,'%1',Wartungsvertrag.Klasse :: Mehrgeräte);
//Wartungsvertrag.SETFILTER(Status,'%1|%2|%3|%4',Wartungsvertrag.Status :: Auftrag,Wartungsvertrag.Status :: ACTS,
//                          Wartungsvertrag.Status :: ACHAT, Wartungsvertrag.Status :: "Champs Partner");
Wartungsvertrag.SETFILTER(Status,'<>%1',Wartungsvertrag.Status :: System);
IF Wartungsvertrag.FINDFIRST THEN
  REPEAT
    Window.UPDATE(1,Wartungsvertrag."Wartungsvertragsnr.");
    temp_sup_artikelnr := '';
    v_verlängerung := 0;
    letztes_ablaufdatum := 0D;

    IF Klasse = Klasse :: Einzelgerät THEN
      BEGIN
        //Zählt ADV-Hardware Replacement
        ServicePositionen.RESET;
        ServicePositionen.SETFILTER(Art,'%1',ServicePositionen.Art :: Service);
        ServicePositionen.SETFILTER("Wartungsvertragsnr.",Wartungsvertrag."Wartungsvertragsnr.");
        ServicePositionen.SETFILTER(Basisgerät,'%1',TRUE);
        ServicePositionen.SETFILTER("SUP Artikelnr.",'%1|%2|%3|%4','CHAMPS-ADV*','ACTS*','ACHAT*','CHAMPS-BASIC-AHR*');
        //ServicePositionen.SETFILTER(Inaktiv,'%1',FALSE);
        IF ServicePositionen.FINDFIRST THEN
          zähler7 += 1;

        //Zählt 1 Jahres oder 3 Jahres Artikel
        ServicePositionen.RESET;
        ServicePositionen.SETFILTER(Art,'%1',ServicePositionen.Art :: Service);
        ServicePositionen.SETFILTER("Wartungsvertragsnr.",Wartungsvertrag."Wartungsvertragsnr.");
        ServicePositionen.SETFILTER("Dauer Serviceleistung",'<>%1','');
        //ServicePositionen.SETFILTER(Basisgerät,'%1',TRUE);
        //ServicePositionen.SETFILTER(Inaktiv,'%1',FALSE);
        IF ServicePositionen.FINDFIRST THEN
          BEGIN
            REPEAT
              IF ServicePositionen."SUP Artikelnr." <> temp_sup_artikelnr THEN
                BEGIN
                  Artikel.GET(ServicePositionen."SUP Artikelnr.");
                  IF STRPOS(Artikel."No. 2",'3YR') <> 0 THEN
                    zähler9 += 1
                  ELSE
                    zähler8 += 1;
                END;

              temp_sup_artikelnr := ServicePositionen."SUP Artikelnr.";
            UNTIL ServicePositionen.NEXT = 0;
          END;
      END;

    IF Klasse = Klasse :: Mehrgeräte THEN
      BEGIN
        //Zählt EXT-HW Warranty
        ServicePositionen.RESET;
        ServicePositionen.SETFILTER(Art,'%1',ServicePositionen.Art :: Service);
        ServicePositionen.SETFILTER("Wartungsvertragsnr.",Wartungsvertrag."Wartungsvertragsnr.");
        ServicePositionen.SETFILTER(Basisgerät,'%1',TRUE);
        ServicePositionen.SETRANGE(Inaktiv,FALSE);
        ServicePositionen.SETFILTER("SUP Artikelnr.",'EXTD-HW*');
        IF ServicePositionen.FINDFIRST THEN
          zähler7 += 1;
      END;

    ServicePositionen.RESET;
    ServicePositionen.SETCURRENTKEY("Wartungsvertragsnr.","Nr.","Belegzeilennr.");
    ServicePositionen.SETRANGE(Art,ServicePositionen.Art :: Service);
    ServicePositionen.SETRANGE("Wartungsvertragsnr.",Wartungsvertrag."Wartungsvertragsnr.");
    ServicePositionen.SETRANGE(Basisgerät,TRUE);
    //ServicePositionen.SETRANGE(Verlängerung,TRUE);
    ServicePositionen.SETRANGE(Inaktiv,FALSE);
    IF ServicePositionen.FINDFIRST THEN
      BEGIN
        REPEAT
          IF (ServicePositionen.Benutzername <> '') AND (ServicePositionen.Verlängerung = TRUE) THEN
            BEGIN
              IF (ServicePositionen."Wartungsvertragsnr." <> temp_vertragsnr) THEN
                BEGIN
                  zähler += 1;
                  v_verlängerung += 1;
                  IF (ServicePositionen.Belegdatum >= CALCDATE('-1W',TODAY))
                  AND (ServicePositionen."Ablaufdatum Serviceleistung" > TODAY) THEN
                    zähler5 += 1;
                  IF Export THEN
                    BEGIN
                      InfoFileF.WRITE(ServicePositionen."Lfd. Nr."+ ',' + ServicePositionen."Wartungsvertragsnr."  + ',' +
                      FORMAT(ServicePositionen."Ablaufdatum Serviceleistung") +"CR+LF");
                    END;
                  temp_ablaufdatum := ServicePositionen."Ablaufdatum Serviceleistung";
                END;

              IF ServicePositionen."Ablaufdatum Serviceleistung" <> temp_ablaufdatum THEN
                BEGIN
                  zähler2 += 1;
                  v_verlängerung += 1;
                  IF Export THEN
                    BEGIN
                      InfoFileF2.WRITE(ServicePositionen."Lfd. Nr."+ ',' + ServicePositionen."Wartungsvertragsnr."  + ',' +
                      FORMAT(ServicePositionen."Ablaufdatum Serviceleistung") +"CR+LF");
                    END;
                END;

              temp_vertragsnr := ServicePositionen."Wartungsvertragsnr.";

            END;

          temp_ablaufdatum := ServicePositionen."Ablaufdatum Serviceleistung";
          IF (letztes_ablaufdatum < ServicePositionen."Ablaufdatum Serviceleistung") AND ((ServicePositionen.Benutzername <> '')
          OR (ServicePositionen."SUP Artikelnr." = 'CHAMPS-SUPP-8X5/YR') OR (
          Wartungsvertrag.Status = Wartungsvertrag.Status :: ACTS) OR
          (Wartungsvertrag.Status = Wartungsvertrag.Status :: ACHAT)) THEN
            letztes_ablaufdatum := ServicePositionen."Ablaufdatum Serviceleistung";

        UNTIL ServicePositionen.NEXT = 0;

        //Korrigiert fehlerhafte Vertragsablaufdaten im Wartungskopf, kann bei manuellen Anpassungen/Löschungen geschehen
        IF (letztes_ablaufdatum <> Wartungsvertrag.Vertragsablaufdatum) AND (letztes_ablaufdatum <> 0D) THEN
          BEGIN
            //Window.CLOSE;
            IF Export THEN
              BEGIN
                InfoFileF.CLOSE;
                InfoFileF2.CLOSE;
              END;
            Wartungsvertrag.Vertragsablaufdatum := letztes_ablaufdatum;
            MESSAGE('Fehler in Wartungsvertrag %1, Vertragsablaufdatum nicht korrekt. Dieser Fehler wurde korrigiert.',
            Wartungsvertrag."Wartungsvertragsnr.");
          END;
      END;

     IF Wartungsvertrag.Verlängerungen <> v_verlängerung THEN  zähler10 += 1;
     Wartungsvertrag.Verlängerungen := v_verlängerung;
     Wartungsvertrag.MODIFY;

      IF Wartungsvertrag.Vertragsablaufdatum < WORKDATE THEN
        zähler3 += 1;
      zähler4 += 1;

      //abgelaufene Verträge, letzten 7 Tage
      IF (Wartungsvertrag.Vertragsablaufdatum >= CALCDATE('-1W',TODAY))
      AND (Wartungsvertrag.Vertragsablaufdatum < TODAY) THEN
        zähler6 += 1;

  UNTIL Wartungsvertrag.NEXT = 0;

IF Klasse = Klasse :: Einzelgerät THEN
  statistik_header := 'Service';
IF Klasse = Klasse :: Mehrgeräte THEN
  statistik_header := 'Flat Geräte';


MESSAGE('Statistik %1:\\Es wurden insgesamt %2 Verträge verlängert.\(umfasst aktive & abgelaufene)'+
'\%3 von %2 wurden mehr als 1x verlängert\(umfasst aktive & abgelaufene)\\Abgelaufene Verträge: %4\\'+
'Letzte 7 Tage verlängert: %6\Letzte 7 Tage abgelaufen: %7\\Wartungsverträge gesamt (in- & aktiv): %5\davon AHR / EXTD: %8'+
'\davon 1YR Service Artikel: %9\davon 3YR Service Artikel: %10',
statistik_header,zähler,zähler2,zähler3,zähler4,zähler5,zähler6,zähler7,zähler8,zähler9);

IF zähler10 <> 0 THEN
  MESSAGE('Korrigierte Verträge: %1',zähler10);

Window.CLOSE;
IF Export THEN
  BEGIN
    InfoFileF.CLOSE;
    InfoFileF2.CLOSE;
  END;

Zähle_Service_einfach(Klasse : 'Einzelgerät,Mehrgeräte';Export : Boolean)
//***************************************************************************************************
//    Zählt verschiedene Statistiken zu den Wartungsverträgen z.B. wieviele velängert wurden etc.
//***************************************************************************************************

IF Export THEN
  BEGIN
    InfoFileF.TEXTMODE := TRUE;
    InfoFileF.CREATE('C:\Temp\Service_Verlängerungen_alle.txt');
    InfoFileF2.TEXTMODE := TRUE;
    InfoFileF2.CREATE('C:\Temp\Service_Verlängerungen_mehrmals.txt');
    InfoFileF.OPEN('C:\Temp\Service_Verlängerungen.txt');
    "CR+LF"[2]:=10;
  END;

zähler := 0;
zähler2 := 0;
zähler3 := 0;

Wartungsvertrag.RESET;
//Wartungsvertrag.SETFILTER(Inaktiv,'%1',FALSE);
IF Klasse = Klasse :: Einzelgerät THEN
  Wartungsvertrag.SETFILTER(Klasse,'%1',Wartungsvertrag.Klasse :: Einzelgerät);
IF Klasse = Klasse :: Mehrgeräte THEN
  Wartungsvertrag.SETFILTER(Klasse,'%1',Wartungsvertrag.Klasse :: Mehrgeräte);
//Wartungsvertrag.SETFILTER(Status,'%1|%2|%3|%4',Wartungsvertrag.Status :: Auftrag,Wartungsvertrag.Status :: ACTS,
//                          Wartungsvertrag.Status :: ACHAT, Wartungsvertrag.Status :: "Champs Partner");
Wartungsvertrag.SETFILTER(Status,'<>%1',Wartungsvertrag.Status :: System);
//Alle Verträge
IF Wartungsvertrag.FINDFIRST THEN
  zähler := Wartungsvertrag.COUNT;

//Laufende Verträge, aber nur Erstverträge
Wartungsvertrag.SETFILTER(Vertragsablaufdatum,'>=%1',WORKDATE);
Wartungsvertrag.SETFILTER(Verlängerungen,'%1',0);
IF Wartungsvertrag.FINDFIRST THEN
  zähler2 := Wartungsvertrag.COUNT;

//Laufende Verträge, verlängerte Verträge
Wartungsvertrag.SETFILTER(Vertragsablaufdatum,'>=%1',WORKDATE);
Wartungsvertrag.SETFILTER(Verlängerungen,'>%1',0);
IF Wartungsvertrag.FINDFIRST THEN
  zähler3 := Wartungsvertrag.COUNT;

//Abgelaufene Verträge
Wartungsvertrag.SETFILTER(Vertragsablaufdatum,'<%1',WORKDATE);
Wartungsvertrag.SETFILTER(Verlängerungen,'>=%1',0);
IF Wartungsvertrag.FINDFIRST THEN
  zähler4 := Wartungsvertrag.COUNT;

//abgelaufene Verträge, letzten 7 Tage
//IF (Wartungsvertrag.Vertragsablaufdatum >= CALCDATE('-1W',TODAY))
//AND (Wartungsvertrag.Vertragsablaufdatum < TODAY) THEN
//  zähler5 += 1;


IF Klasse = Klasse :: Einzelgerät THEN
  statistik_header := 'Service';
IF Klasse = Klasse :: Mehrgeräte THEN
  statistik_header := 'Flat Geräte';


MESSAGE('Statistik %1:\\Es gibt insgesamt %2 Wartungsverträge.\\'+
'%3 davon sind laufende Verträge\'+
'         %4 davon sind aktive Erstverträge\'+
'         %5 dabon sind laufende Verträge mit Verlängerung (min. 1x)\\'+
'%6 Verträge sind derzeit abgelaufen\\',
statistik_header,zähler,zähler2+zähler3,zähler2,zähler3,zähler4);

IF Export THEN
  BEGIN
    InfoFileF.CLOSE;
    InfoFileF2.CLOSE;
  END;

GetUserStatistics(UserID : Code[20];Criteria : Text[30]) : Text[1024]
chr := 10;
CASE Criteria OF

  'Urlaub_offen','Urlaub_rest','Urlaub_gesamt':
  BEGIN
    v_resturlaub:=0;
    Urlaubskartei.RESET;
    Urlaubskartei.SETCURRENTKEY(Mitarbeiter,"genommen von");
    Urlaubskartei.SETFILTER(Urlaubskartei.Mitarbeiter,'%1',UserID);
    Urlaubskartei.SETFILTER(Urlaubskartei.Jahr,'<=%1',FORMAT(DATE2DMY(WORKDATE, 3)));
    IF Urlaubskartei.FINDFIRST THEN
    v_abgr_urlaub:=0;
    v_resturlaub:=0;
    REPEAT
      IF Urlaubskartei.Jahr < FORMAT(DATE2DMY(WORKDATE, 3)) THEN 
        BEGIN
          IF Urlaubskartei.Art=Urlaubskartei.Art::Zugang THEN 
            BEGIN
              v_resturlaub:=v_resturlaub+Urlaubskartei.Urlaubstage;
              v_abgr_urlaub:=v_abgr_urlaub+Urlaubskartei.Urlaubstage;
            END 
          ELSE 
            BEGIN
              v_resturlaub:=v_resturlaub-Urlaubskartei.Urlaubstage;
              v_abgr_urlaub:=v_abgr_urlaub-Urlaubskartei.Urlaubstage;
            END;
         END 
       ELSE 
         BEGIN
           IF Urlaubskartei.Art=Urlaubskartei.Art::Zugang THEN 
             BEGIN
               v_abgr_urlaub:=v_abgr_urlaub+Urlaubskartei.Urlaubstage;
//               IF (DATE2DMY(Urlaubskartei.Datum,1) = 1) AND (DATE2DMY(Urlaubskartei.Datum,2) = 1) THEN
                 v_urlaub_gesamt := v_urlaub_gesamt+Urlaubskartei.Urlaubstage;
             END 
           ELSE 
             BEGIN
               v_abgr_urlaub:=v_abgr_urlaub-Urlaubskartei.Urlaubstage;
             END;
         END;
    UNTIL Urlaubskartei.NEXT=0;
    IF Criteria = 'Urlaub_offen' THEN
      EXIT(FORMAT(v_abgr_urlaub));
    IF Criteria = 'Urlaub_rest' THEN
      EXIT(FORMAT(v_resturlaub));
    IF Criteria = 'Urlaub_gesamt' THEN
      EXIT(FORMAT(v_urlaub_gesamt));
  END;

  'Urlaub_genommen_text','Urlaub_genommen':
  BEGIN
    v_urlaub_text := 'Urlaub wie folgt genommen:' + FORMAT(chr) + FORMAT(chr);
    Urlaubskartei.RESET;
    Urlaubskartei.SETCURRENTKEY(Mitarbeiter,"genommen von");
    Urlaubskartei.SETFILTER(Urlaubskartei.Art,'%1',Urlaubskartei.Art :: Abgang);
    Urlaubskartei.SETFILTER(Urlaubskartei.Mitarbeiter,'%1',UserID);
    Urlaubskartei.SETFILTER(Urlaubskartei.Jahr,'%1',FORMAT(DATE2DMY(WORKDATE, 3)));
    IF Urlaubskartei.FINDFIRST THEN
      BEGIN
        REPEAT
          CASE DATE2DWY(Urlaubskartei."genommen von",1) OF
            1 : weekday := 'Mo.';
            2 : weekday := 'Di.';
            3 : weekday := 'Mi.';
            4 : weekday := 'Do.';
            5 : weekday := 'Fr.';
            6 : weekday := 'Sa.';
            7 : weekday := 'So.';
          END;
          v_urlaub_text := v_urlaub_text + weekday +  '   ' + FORMAT(Urlaubskartei."genommen von") + '-' +
                               FORMAT(Urlaubskartei."genommen bis") + '  (' + FORMAT(Urlaubskartei.Urlaubstage) + ')' + FORMAT(chr);
          v_urlaub_genommen += Urlaubskartei.Urlaubstage;
        UNTIL Urlaubskartei.NEXT=0;
        v_urlaub_text := v_urlaub_text + FORMAT(chr) + 'Insgesamt genommen: ' + FORMAT(v_urlaub_genommen);
      END;
    IF Criteria = 'Urlaub_genommen_text' THEN
      EXIT(v_urlaub_text);
    IF Criteria = 'Urlaub_genommen' THEN
      EXIT(FORMAT(v_urlaub_genommen));
  END;

  'Mandanten':
  BEGIN
    Kontakte.RESET;
    Kontakte.SETFILTER(Type,'%1',Kontakte.Type :: Company);
    Kontakte.SETFILTER("Betreuer Innendienst",'%1',UserID);
    IF Kontakte.FINDFIRST THEN
      v_betr_mandant := Kontakte.COUNT;
    Kontakte.RESET;
    Kontakte.SETFILTER(Type,'%1',Kontakte.Type :: Company);
    Kontakte.SETFILTER("Salesperson Code",'%1',UserID);
    IF Kontakte.FINDFIRST THEN
      v_verk_mandant := Kontakte.COUNT;

    EXIT(FORMAT(v_betr_mandant + v_verk_mandant));
  END;

  'Aufgaben':
  BEGIN
    Aufgaben.RESET;
    Aufgaben.SETFILTER("Salesperson Code",'%1',UserID);
    Aufgaben.SETFILTER("System To-do Type",'%1|%2',
                       Aufgaben."System To-do Type"::Organizer,
                       Aufgaben."System To-do Type"::"Salesperson Attendee");
    Aufgaben.SETFILTER(Closed,'%1',FALSE);
    IF Aufgaben.FINDFIRST THEN
      v_aufgaben := Aufgaben.COUNT;
    EXIT(FORMAT(v_aufgaben));
  END;

  'Auftragseingang':
  BEGIN
    hilfsstring := '01.'+FORMAT(DATE2DMY(WORKDATE,2))+'.'+ FORMAT(DATE2DMY(WORKDATE,3));
    EVALUATE(v_datum_von,hilfsstring);
    v_datum_bis := CALCDATE('1M-1T',v_datum_von);
    AE_mtl.RESET;
    AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
    AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',v_datum_von,v_datum_bis);
    //AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1|%2|%3','RL','MK','IF');
    IF AE_mtl.FINDFIRST THEN 
      BEGIN
        REPEAT
          v_ae_mtl := v_ae_mtl + AE_mtl."Betrag in EUR";
        UNTIL AE_mtl.NEXT=0;
      END;
    //AE_mtl.RESET;
    //AE_mtl.SETFILTER(AE_mtl.Belegart,'%1|%2|%3','AMTL','AEMT','GUMT');
    //AE_mtl.SETFILTER(AE_mtl.Datum,'%1..%2',v_datum_von,v_datum_bis);
    //AE_mtl.SETFILTER(AE_mtl.Betreuer,'%1','ML');
    //AE_mtl.SETFILTER(AE_mtl.Vertreter,'%1|%2|%3|%4|%5|%6','RL','MK','TWW','TWE','TWA','IF');
    //IF AE_mtl.FINDFIRST THEN
    //  BEGIN
    //    REPEAT
    //      v_ae_mtl := v_ae_mtl + AE_mtl."Betrag in EUR";
    //    UNTIL AE_mtl.NEXT=0;
    //  END;
    EXIT(FORMAT(ROUND(v_ae_mtl,0.01))+' €');
  END;

  'Angebote':
  BEGIN
    AktBelege.RESET;
    AktBelege.SETFILTER("Document Type",'%1',AktBelege."Document Type" :: Quote);
    AktBelege.SETFILTER("Betreuer Innendienst",'%1',UserID);
    IF AktBelege.FINDFIRST THEN
      v_akt_angebote := AktBelege.COUNT;
    EXIT(FORMAT(v_akt_angebote));
  END;

  'Angebote_1J':
  BEGIN
    AktBelege.RESET;
    AktBelege.SETFILTER("Document Type",'%1',AktBelege."Document Type" :: Quote);
    AktBelege.SETFILTER("Document Date",'<%1',CALCDATE('-1J',WORKDATE));
    AktBelege.SETFILTER("Betreuer Innendienst",'%1',UserID);
    IF AktBelege.FINDFIRST THEN
      v_akt_angebote := AktBelege.COUNT;
    EXIT(FORMAT(v_akt_angebote));
  END;

  'Aufträge':
  BEGIN
    AktBelege.RESET;
    AktBelege.SETFILTER("Document Type",'%1',AktBelege."Document Type" :: Order);
    AktBelege.SETFILTER("Betreuer Innendienst",'%1',UserID);
    IF AktBelege.FINDFIRST THEN
      v_akt_aufträge := AktBelege.COUNT;
    EXIT(FORMAT(v_akt_aufträge));
  END;

END
