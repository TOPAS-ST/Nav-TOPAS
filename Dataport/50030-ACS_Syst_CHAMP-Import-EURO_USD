
Documentation()

Dataport - OnInitDataport()

Dataport - OnPreDataport()
// Excel Datei Definitionen ******************************************************************
// *******************************************************************************************

CLEAR(Quelle_Excel);
CLEAR(Quelle_Sheet);
CLEAR(Quelle_Book);

geänderte_einträge := 0;
obsolete_einträge := 0;
excel_datensätze := 0;

auswahl := STRMENU(Text100,5);
IF auswahl = 0 THEN
  EXIT;

// Definiert die zu importierende Datei
IF CREATE (Quelle_Excel,FALSE) THEN BEGIN END ELSE ERROR('Cannot start Excel Application.');
Quelle_Book := Quelle_Excel.Workbooks._Open(CurrDataport.FILENAME,0,FALSE); //Kein Schreibschutz
Quelle_j:='1';


//CHAMPS oder ACTS
IF (auswahl = 1) OR (auswahl = 2) THEN
  BEGIN

    //********************************************************************************************
    //                         Eigentliches Update der CHAMP Artikel
    //********************************************************************************************

    Quelle_Sheet := Quelle_Excel.Worksheets.Item('Einspielen');

    excel_datensätze := Quelle_Sheet.UsedRange.Rows.Count;
    PL_Wäh := FORMAT(Quelle_Sheet.Range(Spalte_Wäh+Quelle_j).Value);
    EVALUATE(v_art,FORMAT(Quelle_Sheet.Range(Spalte_Art+Quelle_j).Value));

    IF (auswahl = 1) AND (FORMAT(v_art) <> 'Champs') THEN ERROR('Falsche Syntax in Liste');
    IF (auswahl = 2) AND (FORMAT(v_art) <> 'ACTS') THEN ERROR('Falsche Syntax in Liste');

    IF excel_datensätze > 999 THEN
      BEGIN
        IF CONFIRM('Es konnte mehr als 1000 Einträge in der Quelldatei gefunden werden.\' +
                   'Soll der Status Update letzte Preisliste für alle Artikel zurückgesetzt und neu ' +
                   'bewertet werden?',TRUE) THEN
          BEGIN
            Servicepreise.RESET;
            IF auswahl = 1 THEN
              Servicepreise.SETRANGE(Art,Servicepreise.Art :: Champs);
            IF auswahl = 2 THEN
              Servicepreise.SETRANGE(Art,Servicepreise.Art :: ACTS);
            Servicepreise.SETRANGE(Währungscode,PL_Wäh);
            IF Servicepreise.FINDFIRST THEN
              Servicepreise.MODIFYALL("Update letzte Preisliste",FALSE);
          END;
      END;

    REPEAT

        excel_msrp := 0;

        Artikelname := FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value);
        ServiceArtikelname := FORMAT(Quelle_Sheet.Range(Spalte_Serviceartikelnr+Quelle_j).Value);
        SUPArtikelname := FORMAT(Quelle_Sheet.Range(Spalte_SUP+Quelle_j).Value);
        IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> '' THEN
          excel_msrp := Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value;
        PL_Version := Quelle_Sheet.Range(Spalte_PL_Version+Quelle_j).Value;

       IF Artikelname = '' THEN
         BEGIN
         END
       ELSE
         BEGIN
           //Kennzeichnung der alten Pos., dass die Zuordnung obsolete geworden ist, da Champ Artikelnr. geändert wurde
           Artikelnr_obsolete.RESET;
           IF auswahl = 1 THEN
             Artikelnr_obsolete.SETFILTER(Art,'%1',Artikelnr_obsolete.Art :: Champs);
           IF auswahl = 2 THEN
             Artikelnr_obsolete.SETFILTER(Art,'%1',Artikelnr_obsolete.Art :: ACTS);
           Artikelnr_obsolete.SETFILTER("Artikelnr. 2",'%1',Artikelname);
           Artikelnr_obsolete.SETFILTER("SUP Artikelnr.",'%1',SUPArtikelname);
           Artikelnr_obsolete.SETFILTER(Währungscode,'%1',PL_Wäh);
           Artikelnr_obsolete.SETFILTER("Zuordnung obsolete",'%1',FALSE);
           IF Artikelnr_obsolete.FINDFIRST THEN
             REPEAT
               IF Artikelnr_obsolete."Service Artikelnr." <> ServiceArtikelname THEN
                 BEGIN
                   Artikelnr_obsolete."Zuordnung obsolete" := TRUE;
                   Artikelnr_obsolete.MODIFY(TRUE);
                   obsolete_einträge += 1;
                   Quelle_Sheet.Range('L'+Quelle_j).Value := FORMAT(Quelle_Sheet.Range('L'+Quelle_j).Value) +
                   Artikelnr_obsolete."Service Artikelnr." + ';';
                 END;
             UNTIL Artikelnr_obsolete.NEXT = 0;

           Servicepreise.RESET;
           IF auswahl = 1 THEN
             Servicepreise.SETFILTER(Art,'%1',Servicepreise.Art :: Champs);
           IF auswahl = 2 THEN
             Servicepreise.SETFILTER(Art,'%1',Servicepreise.Art :: ACTS);
           Servicepreise.SETFILTER("Artikelnr. 2",'%1',Artikelname);
           Servicepreise.SETFILTER("Service Artikelnr.",'%1',ServiceArtikelname);
           Servicepreise.SETFILTER("SUP Artikelnr.",'%1',SUPArtikelname);
           Servicepreise.SETFILTER(Währungscode,'%1',PL_Wäh);
           IF Servicepreise.FINDFIRST THEN
             BEGIN
               IF (Servicepreise.MSRP <> ROUND(excel_msrp,0.01)) AND (excel_msrp <> 0) THEN
                 BEGIN
                   geänderte_einträge += 1;
                   Servicepreise.MSRP := ROUND(excel_msrp,0.01);
                   Servicepreise.MODIFY(TRUE);
                 END;
               Servicepreise."Update letzte Preisliste" := TRUE;
               Servicepreise.Preisliste := Quelle_Sheet.Range(Spalte_PL_Version+Quelle_j).Value;
               IF Servicepreise."Zuordnung obsolete" = TRUE THEN
                 BEGIN
                   Servicepreise."Zuordnung obsolete" := FALSE;
                   obsolete_korrigiert += 1;
                   Quelle_Sheet.Range('M'+Quelle_j).Value := 'obsolete korrigiert';
                 END;
               Servicepreise.MODIFY;
             END
           ELSE
             BEGIN
               Servicepreise.INIT;
               Servicepreise."Service Artikelnr." := FORMAT(Quelle_Sheet.Range(Spalte_Serviceartikelnr+Quelle_j).Value);
               Servicepreise."SUP Artikelnr." := FORMAT(Quelle_Sheet.Range(Spalte_SUP+Quelle_j).Value);
               Artikel.RESET;
               Artikel.SETFILTER("No. 2",'%1',FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value));
               IF Artikel.FINDFIRST THEN
                 BEGIN
                   Servicepreise.VALIDATE("Artikelnr.",Artikel."No.");
                 END
               ELSE
                 BEGIN
                   //Servicepreise."Artikelnr." := FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value);
                   Servicepreise."Artikelnr. 2" := FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value);
                 END;
               Servicepreise.MSRP := ROUND(excel_msrp,0.01);
               Servicepreise."Update letzte Preisliste" := TRUE;
               Servicepreise.Preisliste := Quelle_Sheet.Range(Spalte_PL_Version+Quelle_j).Value;
               Servicepreise.Währungscode := PL_Wäh;
               Servicepreise."Laufzeit in Jahren" := Quelle_Sheet.Range(Spalte_YR+Quelle_j).Value;
               IF auswahl = 1 THEN
                 Servicepreise.Art := Servicepreise.Art :: Champs;
               IF auswahl = 2 THEN
                 Servicepreise.Art := Servicepreise.Art :: ACTS;
               Servicepreise.INSERT(TRUE);
               geänderte_einträge += 1;
             END;

         END;

      //*********************************************************************************************
      // Abbruchbedingung
      // Wenn in der Quelldatei 15 Leere Zeilen hintereinander kommen, ist das Dateiende erreicht
      IF Artikelname = '' THEN                                       // erkennt das Ende der Excel Datei
         BEGIN
           leere_zeilen := leere_zeilen+1;
         END
         ELSE
         BEGIN
           leere_zeilen :=0;
         END;

      Quelle_j:=INCSTR(Quelle_j);                                                 // nächste Zeile Importdatei

    UNTIL (Max_Datensätze = Quelle_j) OR (leere_zeilen = 15);  // Nach 15 Zeilen ohne Artikel ist Schluss

    //Quelle_Book.Save;
    Quelle_Book.Close(TRUE);
    Quelle_Excel.Quit;

    CLEAR(Quelle_Sheet);
    CLEAR(Quelle_Book);
    CLEAR(Quelle_Excel);

    //REPEAT
    //UNTIL ISCLEAR(Quelle_Excel) AND ISCLEAR(Quelle_Book) AND ISCLEAR(Quelle_Sheet);
  END;


//Systeme MSRP
IF auswahl = 3 THEN
  BEGIN

    Quelle_Sheet := Quelle_Excel.Worksheets.Item('Einspielen');

    //Führende Einkaufswährung
    system_ek_währung := '';

    Quelle_j := '2';
    excel_datensätze := Quelle_Sheet.UsedRange.Rows.Count;
    PL_Wäh := FORMAT(Quelle_Sheet.Range(Spalte_Wäh_Systeme+Quelle_j).Value);

    IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+'1').Value) <> 'MSRP' THEN
      ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_MSRP + ' muss MSRP sein.');
    IF FORMAT(Quelle_Sheet.Range(Spalte_DC_Systeme+'1').Value) <> 'DC' THEN
      ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_DC_Systeme + ' muss DC sein.');

    IF (excel_datensätze > 499) AND (PL_Wäh = system_ek_währung) THEN
      BEGIN
        IF CONFIRM('Es konnte mehr als 500 Einträge in der Quelldatei gefunden werden.\' +
                   'Soll der Status Update letzte Preisliste für alle Artikel zurückgesetzt und neu ' +
                   'bewertet werden?',TRUE) THEN
        Artikel.RESET;
        Artikel.SETFILTER("Manufacturer Code",'%1','59');
        IF Artikel.FINDFIRST THEN 
          Artikel.MODIFYALL(Artikel."Update letzte Preisliste",FALSE);
      END;

    REPEAT

      excel_dc := 0;
      excel_msrp := 0;
      EOL := FALSE;

      Artikelname := FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value);
      IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> 'EOL' THEN
        BEGIN
          IF FORMAT(Quelle_Sheet.Range(Spalte_DC_Systeme+Quelle_j).Value) <> '' THEN
            excel_dc := Quelle_Sheet.Range(Spalte_DC_Systeme+Quelle_j).Value;
          excel_dc := ROUND(excel_dc,0.01);
          IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> '' THEN
            excel_msrp := Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value;
          excel_msrp := ROUND(excel_msrp,0.01);
        END
      ELSE
        EOL := TRUE;

      PL_Wäh := FORMAT(Quelle_Sheet.Range(Spalte_Wäh_Systeme+Quelle_j).Value);
      IF FORMAT(Quelle_Sheet.Range(Spalte_Startdatum+Quelle_j).Value) <> '' THEN
      startdatum := Quelle_Sheet.Range(Spalte_Startdatum+Quelle_j).Value;
      IF Artikelname <> '' THEN
        PL_Version_Systeme := FORMAT(Quelle_Sheet.Range(Spalte_PL_Version_Systeme+Quelle_j).Value);

      IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN
        BEGIN
        END
      ELSE
        BEGIN
          Kreditor.GET(Kred);
          IF PL_Wäh = system_ek_währung THEN
            IF PL_Wäh <> Kreditor."Currency Code" THEN
              ERROR(Text001,Kred);

          Artikel.RESET;
          Artikel.SETFILTER("No. 2",'%1',Artikelname);
          IF Artikel.FINDFIRST THEN
            BEGIN

              //*********************************************************************************************
              //                                    EK-Preise updaten
              //*********************************************************************************************

              IF PL_Wäh = system_ek_währung THEN
                BEGIN
                  einkaufspreis.RESET;
                  einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                  einkaufspreis.SETFILTER("Vendor No.",'%1',Kred);
                  einkaufspreis.SETFILTER("Currency Code",'%1',PL_Wäh);
                  einkaufspreis.SETFILTER("Ending Date",'%1',0D);
                  einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                  IF einkaufspreis.FINDFIRST THEN
                    BEGIN
                      einkaufspreis."Ending Date" := startdatum - 1;
                      einkaufspreis.MODIFY(TRUE);
                    END;

                  IF (excel_dc <> 0) THEN
                    BEGIN
                      einkaufspreis.RESET;
                      einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                      einkaufspreis.SETFILTER("Vendor No.",'%1',Kred);
                      einkaufspreis.SETFILTER("Currency Code",'%1',PL_Wäh);
                      einkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                      IF NOT einkaufspreis.FINDFIRST THEN
                        BEGIN
                          einkaufspreis.INIT;
                          einkaufspreis."Item No." := Artikel."No.";
                          einkaufspreis."Vendor No." := Kred;
                          einkaufspreis."Starting Date" := startdatum;
                          einkaufspreis."Currency Code" := PL_Wäh;
                          einkaufspreis."Unit of Measure Code" := 'STÜCK';
                          einkaufspreis."Direct Unit Cost" := excel_dc;
                          einkaufspreis.INSERT(TRUE);
                          geänderte_einträge += 1;
                       END
                     ELSE
                       BEGIN
                         //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                         IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN
                           BEGIN
                             einkaufspreis."Direct Unit Cost" := excel_dc;
                             einkaufspreis.MODIFY;
                             geänderte_einträge += 1;
                           END;
                       END;

                    END;

                  Artikel."Update letzte Preisliste" := TRUE;
                  Artikel.MODIFY(TRUE);

                END;

              //*********************************************************************************************
              //                                    VK-Preise updaten
              //*********************************************************************************************

              verkaufspreis.RESET;
              verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type" :: "All Customers");
              verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
              verkaufspreis.SETFILTER("Currency Code",'%1',PL_Wäh);
              verkaufspreis.SETFILTER("Ending Date",'%1',0D);
              verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
              IF verkaufspreis.FINDFIRST THEN
                BEGIN
                  verkaufspreis."Ending Date" := startdatum - 1;
                  verkaufspreis.MODIFY(TRUE);
                END;
             
              IF excel_msrp <> 0 THEN
                BEGIN
                  verkaufspreis.RESET;
                  verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type" :: "All Customers");
                  verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                  verkaufspreis.SETFILTER("Currency Code",'%1',PL_Wäh);
                  verkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                  IF NOT verkaufspreis.FINDFIRST THEN
                    BEGIN
                      verkaufspreis.INIT;
                      verkaufspreis."Sales Type" := verkaufspreis."Sales Type" :: "All Customers";
                      verkaufspreis."Item No.":= Artikel."No.";
                      verkaufspreis."Starting Date" := startdatum;
                      verkaufspreis."Currency Code" := PL_Wäh;
                      verkaufspreis."Unit of Measure Code" := 'STÜCK';
                      verkaufspreis."Unit Price" := excel_msrp;
                      verkaufspreis.INSERT(TRUE);
                    END;
                END;

              IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
              OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
              OR (Artikel.Bezeichnung2_lang = '') THEN
                BEGIN
                  Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                  Artikel.MODIFY(TRUE);
                END;

              IF EOL THEN
                IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                  Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
            END;

        END;

     //*********************************************************************************************
     // Abbruchbedingung
     // Wenn in der Quelldatei 15 Leere Zeilen hintereinander kommen, ist das Dateiende erreicht
     IF Artikelname = '' THEN                                       // erkennt das Ende der Excel Datei
        BEGIN
          leere_zeilen := leere_zeilen+1;
        END
        ELSE
        BEGIN
          leere_zeilen :=0;
        END;

     Quelle_j:=INCSTR(Quelle_j);                                                 // nächste Zeile Importdatei

   UNTIL (Max_Datensätze = Quelle_j) OR (leere_zeilen = 10);  // Nach 10 Zeilen ohne Artikel ist Schluss

   Artikel.RESET;
   Artikel.SETFILTER("Manufacturer Code",'%1','59');
   Artikel.SETFILTER("Update letzte Preisliste",'%1',FALSE);
   Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*'+'Nicht in der Preisliste' + '*','*' +'Stand Preisliste' + '*');
   IF Artikel.FINDFIRST THEN 
     Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');

    Quelle_Book.Close(FALSE);
    Quelle_Excel.Quit;

   CLEAR(Quelle_Sheet);
   CLEAR(Quelle_Book);
   CLEAR(Quelle_Excel);

   //REPEAT
   //UNTIL ISCLEAR(Quelle_Excel) AND ISCLEAR(Quelle_Book) AND ISCLEAR(Quelle_Sheet);

  END;

//Systeme MSRP Schaeffler
IF auswahl = 4 THEN
  BEGIN

    Quelle_Sheet := Quelle_Excel.Worksheets.Item('Einspielen');

    Quelle_j := '2';
    excel_datensätze := Quelle_Sheet.UsedRange.Rows.Count;
    PL_Wäh := FORMAT(Quelle_Sheet.Range(Spalte_Wäh_Systeme+Quelle_j).Value);

    IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+'1').Value) <> 'MSRP' THEN
      ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_MSRP + ' muss MSRP sein.');
    IF FORMAT(Quelle_Sheet.Range(Spalte_DC_Systeme+'1').Value) <> 'DC' THEN
      ERROR('Fehlerhafte Syntax in der System Preisliste > Spalte ' + Spalte_DC_Systeme + ' muss DC sein.');

    REPEAT

      excel_dc := 0;
      excel_msrp := 0;
      EOL := FALSE;

      Artikelname := FORMAT(Quelle_Sheet.Range(Spalte_Part+Quelle_j).Value);
      IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> 'EOS' THEN
        BEGIN
          IF FORMAT(Quelle_Sheet.Range(Spalte_DC_Systeme+Quelle_j).Value) <> '' THEN
            excel_dc := Quelle_Sheet.Range(Spalte_DC_Systeme+Quelle_j).Value;
          excel_dc := ROUND(excel_dc,0.01);
          IF FORMAT(Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value) <> '' THEN
            excel_msrp := Quelle_Sheet.Range(Spalte_MSRP+Quelle_j).Value;
          excel_msrp := ROUND(excel_msrp,0.01);
        END
      ELSE
        EOL := TRUE;

      PL_Wäh := FORMAT(Quelle_Sheet.Range(Spalte_Wäh_Systeme+Quelle_j).Value);
      IF FORMAT(Quelle_Sheet.Range(Spalte_Startdatum+Quelle_j).Value) <> '' THEN
      startdatum := Quelle_Sheet.Range(Spalte_Startdatum+Quelle_j).Value;
      IF Artikelname <> '' THEN
        PL_Version_Systeme := FORMAT(Quelle_Sheet.Range(Spalte_PL_Version_Systeme+Quelle_j).Value);

      IF (Artikelname = '') OR (STRLEN(Artikelname) > 40) THEN
        BEGIN
        END
      ELSE
        BEGIN
          Kreditor.GET(Kred_EURO);
          IF PL_Wäh = 'USD' THEN
            IF PL_Wäh <> Kreditor."Currency Code" THEN
              ERROR(Text001,Kred_EURO);

          Artikel.RESET;
          Artikel.SETFILTER("No. 2",'%1',Artikelname);
          IF Artikel.FINDFIRST THEN
            BEGIN

              //*********************************************************************************************
              //                                    EK-Preise updaten
              //*********************************************************************************************

              IF PL_Wäh = '' THEN
                BEGIN
                  einkaufspreis.RESET;
                  einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                  einkaufspreis.SETFILTER("Vendor No.",'%1',Kred_EURO);
                  einkaufspreis.SETFILTER("Currency Code",'%1',PL_Wäh);
                  einkaufspreis.SETFILTER("Ending Date",'%1',0D);
                  einkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
                  IF einkaufspreis.FINDFIRST THEN
                    BEGIN
                      einkaufspreis."Ending Date" := startdatum - 1;
                      einkaufspreis.MODIFY(TRUE);
                    END;

                  IF (excel_dc <> 0) THEN
                    BEGIN
                      einkaufspreis.RESET;
                      einkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                      einkaufspreis.SETFILTER("Vendor No.",'%1',Kred_EURO);
                      einkaufspreis.SETFILTER("Currency Code",'%1',PL_Wäh);
                      einkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                      IF NOT einkaufspreis.FINDFIRST THEN
                        BEGIN
                          einkaufspreis.INIT;
                          einkaufspreis."Item No." := Artikel."No.";
                          einkaufspreis."Vendor No." := Kred_EURO;
                          einkaufspreis."Starting Date" := startdatum;
                          einkaufspreis."Currency Code" := PL_Wäh;
                          einkaufspreis."Unit of Measure Code" := 'STÜCK';
                          einkaufspreis."Direct Unit Cost" := excel_dc;
                          einkaufspreis.INSERT(TRUE);
                          geänderte_einträge += 1;
                       END
                     ELSE
                       BEGIN
                         //Falls der 1. Lauf noch inkorrekte DCs hatte, z.B. bei einigen Artikeln nun 80% anstatt 60% vom MSRP
                         IF einkaufspreis."Direct Unit Cost" <> excel_dc THEN
                           BEGIN
                             einkaufspreis."Direct Unit Cost" := excel_dc;
                             einkaufspreis.MODIFY;
                             geänderte_einträge += 1;
                           END;
                       END;

                    END;

                  Artikel."Update letzte Preisliste" := TRUE;
                  Artikel.MODIFY(TRUE);

                END;

              //*********************************************************************************************
              //                                    VK-Preise updaten
              //*********************************************************************************************

              verkaufspreis.RESET;
              verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type" :: "All Customers");
              verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
              verkaufspreis.SETFILTER("Currency Code",'%1',PL_Wäh);
              verkaufspreis.SETFILTER("Ending Date",'%1',0D);
              verkaufspreis.SETFILTER("Starting Date",'<>%1',startdatum);
              IF verkaufspreis.FINDFIRST THEN
                BEGIN
                  verkaufspreis."Ending Date" := startdatum - 1;
                  verkaufspreis.MODIFY(TRUE);
                END;
             
              IF excel_msrp <> 0 THEN
                BEGIN
                  verkaufspreis.RESET;
                  verkaufspreis.SETFILTER("Sales Type",'%1',verkaufspreis."Sales Type" :: "All Customers");
                  verkaufspreis.SETFILTER("Item No.",'%1',Artikel."No.");
                  verkaufspreis.SETFILTER("Currency Code",'%1',PL_Wäh);
                  verkaufspreis.SETFILTER("Starting Date",'%1',startdatum);
                  IF NOT verkaufspreis.FINDFIRST THEN
                    BEGIN
                      verkaufspreis.INIT;
                      verkaufspreis."Sales Type" := verkaufspreis."Sales Type" :: "All Customers";
                      verkaufspreis."Item No.":= Artikel."No.";
                      verkaufspreis."Starting Date" := startdatum;
                      verkaufspreis."Currency Code" := PL_Wäh;
                      verkaufspreis."Unit of Measure Code" := 'STÜCK';
                      verkaufspreis."Unit Price" := excel_msrp;
                      verkaufspreis.INSERT(TRUE);
                    END;
                END;

              IF (STRPOS(Artikel.Bezeichnung2_lang,'Nicht in der Preisliste') <> 0)
              OR (STRPOS(Artikel.Bezeichnung2_lang,'Stand Preisliste') <> 0)
              OR (Artikel.Bezeichnung2_lang = '') THEN
                BEGIN
                  Artikel.Bezeichnung2_lang := 'Stand Preisliste: ' + PL_Version_Systeme;
                  Artikel.MODIFY(TRUE);
                END;

              IF EOL THEN
                IF STRPOS(Artikel.Preisinfo,'EOL') = 0 THEN
                  Artikel.Preisinfo := Artikel.Preisinfo + ' EOL - PL ' + PL_Version_Systeme;
            END;

        END;

     //*********************************************************************************************
     // Abbruchbedingung
     // Wenn in der Quelldatei 15 Leere Zeilen hintereinander kommen, ist das Dateiende erreicht
     IF Artikelname = '' THEN                                       // erkennt das Ende der Excel Datei
        BEGIN
          leere_zeilen := leere_zeilen+1;
        END
        ELSE
        BEGIN
          leere_zeilen :=0;
        END;

     Quelle_j:=INCSTR(Quelle_j);                                                 // nächste Zeile Importdatei

   UNTIL (Max_Datensätze = Quelle_j) OR (leere_zeilen = 10);  // Nach 10 Zeilen ohne Artikel ist Schluss

   { // Nach Rückstellung auf 4.7.04 von 4.8.11.1 gibt es hier Probleme, da er auch alle anderen Artikel anfassen würde
   Artikel.RESET;
   Artikel.SETFILTER("Manufacturer Code",'%1','59');
   Artikel.SETFILTER("Update letzte Preisliste",'%1',FALSE);
   Artikel.SETFILTER(Bezeichnung2_lang,'%1|%2|%3','','*'+'Nicht in der Preisliste' + '*','*' +'Stand Preisliste' + '*');
   IF Artikel.FINDFIRST THEN
     Artikel.MODIFYALL(Bezeichnung2_lang,'Nicht in der Preisliste ' + PL_Version_Systeme + ' vorhanden.');
   }

   Quelle_Book.Close(FALSE);
   Quelle_Excel.Quit;

   CLEAR(Quelle_Sheet);
   CLEAR(Quelle_Book);
   CLEAR(Quelle_Excel);

   //REPEAT
   //UNTIL ISCLEAR(Quelle_Excel) AND ISCLEAR(Quelle_Book) AND ISCLEAR(Quelle_Sheet);

  END;

Dataport - OnPostDataport()
IF PL_Wäh = '' THEN
  wäh_text := 'EURO';
IF PL_Wäh = 'USD' THEN
  wäh_text := 'USD';

CASE auswahl OF
 1: pl_bezeichnung := 'CHAMPS ' + wäh_text;
 2: pl_bezeichnung := 'ACTS ' + wäh_text;
 3: pl_bezeichnung := 'System ' + wäh_text;
END;

MESSAGE('Import der %1 Artikel abgeschlossen.'+ '\' + 'Neue bzw. geänderte Datensätze: %2\\'+
        'Excel Datensätze: %3\Obsolete Bezeichnungen: %4 (korrigiert: %5)'
        ,pl_bezeichnung,geänderte_einträge,excel_datensätze,obsolete_einträge,obsolete_korrigiert);
