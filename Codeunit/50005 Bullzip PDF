OBJECT Codeunit 50005 Bullzip PDF
{
  OBJECT-PROPERTIES
  {
    Date=06.01.17;
    Time=08:56:39;
    Modified=Yes;
    Version List=PDF10.25.0.2552;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      lPrinterSelection@1140006 : Record 78;
      Customer@1140008 : Record 18;
      pdfFileName@1160840002 : Text[250];
      statusFileName@1160840005 : Text[250];
      certificateFileName@1160840001 : Text[250];
      certificatePassword@1160840009 : Text[30];
      backgroundFileName@1160840008 : Text[250];
      mergeBeforeFileName@1160840011 : Text[250];
      mergeAfterFileName@1160840012 : Text[250];
      baseFolder@1160840010 : Text[250];
      statusFolder@1140002 : Text[250];
      pdfSettings@1160840003 : Automation "{A3F69B34-EAD8-4A3B-8DD5-C1C3FD300D67} 4.0:{F6C83BBD-F620-4F13-8320-9C51D1996EC4}:'Bullzip - PDF Writer Automation'.ComPdfSettings";
      pdfUtil@1160840004 : Automation "{A3F69B34-EAD8-4A3B-8DD5-C1C3FD300D67} 4.0:{F9444F96-C32A-4745-9FF3-9059B92CDAB0}:'Bullzip - PDF Writer Automation'.ComPdfUtil";
      pdfFolderName@1160840007 : Text[200];
      counter@1160840013 : Integer;
      TOPAS_API@1140001 : Codeunit 50001;
      OriginalPrinter@1140004 : Text[200];
      Window@1140003 : Dialog;
      WindowIsOpen@1140000 : Boolean;
      DocNo@1140005 : Code[20];
      printerselection_inserted@1140007 : Boolean;

    PROCEDURE BullzipPDF_Order@1140001(VAR SalesHeader@1140003 : Record 36;baseFolder@1140001 : Text[1000];ReportID@1140002 : Integer);
    VAR
      SalesHeader2@1140004 : Record 36;
    BEGIN
      //Auftragsbestâ€žtigungen per PDF

      CREATE(pdfSettings,FALSE);
      CREATE(pdfUtil);
      printerselection_inserted := FALSE;
      OriginalPrinter := '';

      IF SalesHeader.FINDFIRST THEN BEGIN

        // The status file is used to check for errors and determine when the PDF is ready.
        statusFolder := ENVIRON('APPDATA') + '\Bullzip PDF';
        TOPAS_API.NewFolder(statusFolder);
        statusFileName := statusFolder + '\status.ini';

        // You can get a free test certificate at http://www.pdfpowertool.com
        //certificateFileName := baseFolder + '\ressources\certificate.pfx';
        //certificatePassword := 'password';
        // Set file name of background PDF.
        // Performance can be increased if you use an EPS file for background instead of a PDF.
        // Letterhead-A4.eps is a sample EPS background.
        // Note that using EPS files as background requires the Expert edition of the PDF Printer.
        //backgroundFileName := baseFolder + '\ressources\letterhead-a4.pdf';

        //mergeBeforeFileName := baseFolder + '\ressources\Before.pdf';
        //mergeAfterFileName := baseFolder + '\ressources\After.pdf';

        counter := 0;
        Window.OPEN('generiere PDF zu Beleg ########1\\'+
                    'Dokumente generiert    ########2',DocNo,counter);
        WindowIsOpen := TRUE;

        IF NOT lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          lPrinterSelection.INIT;
          lPrinterSelection."User ID" := USERID;
          lPrinterSelection."Report ID" := ReportID;
          lPrinterSelection."Printer Name" := 'Bullzip PDF Printer';
          lPrinterSelection.INSERT;
          printerselection_inserted := TRUE;
        END ELSE BEGIN
            OriginalPrinter := lPrinterSelection."Printer Name";
            lPrinterSelection."Printer Name" := 'Bullzip PDF Printer';
            lPrinterSelection.MODIFY(TRUE);
        END;

        REPEAT

          DocNo := SalesHeader."No.";
          Window.UPDATE(1, DocNo);
          Window.UPDATE(2, counter);

          // Set file name for output file.
          pdfFileName := baseFolder + '\' + SalesHeader."No." + '.pdf';

          // Delete old output file if it already exist.
          //IF EXISTS(pdfFileName) THEN ERASE(pdfFileName);

          // Multiple PDF printers could be installed.
          // Let the automation know which one to control.
          pdfSettings.printerName := pdfUtil.DefaultPrinterName;

          // Set output file name
          pdfSettings.SetValue('Output', pdfFileName);

          // Make sure no dialogs are shown during conversion.
          pdfSettings.SetValue('ShowSaveAs', 'never');
          pdfSettings.SetValue('ShowSettings', 'never');
          pdfSettings.SetValue('ShowPDF', 'no');
          pdfSettings.SetValue('ShowProgress', 'no');
          pdfSettings.SetValue('ShowProgressFinished', 'no');
          pdfSettings.SetValue('ConfirmOverwrite', 'no');

          // Set file name of status file to wait for.
          pdfSettings.SetValue('StatusFile', statusFileName);

          // Add a text watermark.
          //pdfSettings.SetValue('WatermarkText', 'PDF EXAMPLE - order ' +  SalesHeader."No.");
          //pdfSettings.SetValue('WatermarkColor', '#FF0000');
          //pdfSettings.SetValue('WatermarkVerticalPosition', 'top');
          //pdfSettings.SetValue('WatermarkHorizontalPosition', 'right');
          //pdfSettings.SetValue('WatermarkRotation', '90');
          //pdfSettings.SetValue('WatermarkOutlineWidth', '0.5');
          //pdfSettings.SetValue('WatermarkFontSize', '20');
          //pdfSettings.SetValue('WatermarkVerticalAdjustment', '5');
          //pdfSettings.SetValue('WatermarkHorizontalAdjustment', '1');

          // Add a background.
          // If a professional or expert license is installed the quality of the
          // background will improve.
          //pdfSettings.SetValue('Superimpose', backgroundFileName);
          //pdfSettings.SetValue('SuperimposeLayer', 'bottom');

          // Merge with other PDF files.
          //pdfSettings.SetValue('MergeFile', mergeBeforeFileName + '|.|' + mergeAfterFileName);

          // Sign with a digital certificate.
          //pdfSettings.SetValue('SignCertificate', certificateFileName);
          //pdfSettings.SetValue('SignPassword', certificatePassword);
          //pdfSettings.SetValue('ShowSignature', 'yes');

          // Do not show errors in PDF user interface.
          pdfSettings.SetValue('SuppressErrors', 'yes');

          // You can see more features and settings at
          // http://www.biopdf.com/guide/settings.php

          // Write settings to printer.
          // This writes a file name runonce.ini. It is a configuration that is used
          // for the next print job. The printer will delete the runonce.ini after it
          // is read.
          pdfSettings.WriteSettings(TRUE);

          IF EXISTS(statusFileName) THEN ERASE(statusFileName);

          SalesHeader2.COPY(SalesHeader);
          SalesHeader2.SETRECFILTER;
          REPORT.RUNMODAL(ReportID, FALSE, FALSE, SalesHeader2);

          IF pdfUtil.WaitForFile(statusFileName, 20000)  THEN BEGIN
            // Check status file for errors.
            IF pdfUtil.ReadIniString(statusFileName, 'Status', 'Errors', '') <> '0' THEN BEGIN
              ERROR('Error creating PDF. ' + pdfUtil.ReadIniString(statusFileName, 'Status', 'MessageText', ''));
            END;
          END ELSE BEGIN
            // The timeout elapsed. Something is wrong.
            ERROR('Error creating ' + pdfFileName)
          END;

          counter += 1;
          Window.UPDATE(2,counter);

        UNTIL (SalesHeader.NEXT=0);
      END;

      IF printerselection_inserted THEN BEGIN
        IF lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          //lPrinterSelection."Printer Name" := pdfUtil.GetWindowsDefaultPrinterName;
          //lPrinterSelection.MODIFY;
          lPrinterSelection.DELETE;
        END;
      END ELSE BEGIN
        IF lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          lPrinterSelection."Printer Name" := OriginalPrinter;
          lPrinterSelection.MODIFY(TRUE);
        END;
      END;

      IF WindowIsOpen THEN
        Window.CLOSE;
      WindowIsOpen := FALSE;

      CLEAR(pdfSettings);
      CLEAR(pdfUtil);
    END;

    PROCEDURE BullzipPDF_Invoice@1140000(VAR InvHeader@1140003 : Record 112;baseFolder@1140001 : Text[1000];ReportID@1140002 : Integer);
    VAR
      InvHeader2@1140004 : Record 112;
    BEGIN
      //Rechnungen per PDF

      CREATE(pdfSettings);
      CREATE(pdfUtil);
      printerselection_inserted := FALSE;
      OriginalPrinter := '';

      IF InvHeader.FINDFIRST THEN BEGIN

        // The status file is used to check for errors and determine when the PDF is ready.
        statusFolder := ENVIRON('APPDATA') + '\Bullzip PDF';
        TOPAS_API.NewFolder(statusFolder);
        statusFileName := statusFolder + '\status.ini';

        // You can get a free test certificate at http://www.pdfpowertool.com
        //certificateFileName := baseFolder + '\ressources\certificate.pfx';
        //certificatePassword := 'password';
        // Set file name of background PDF.
        // Performance can be increased if you use an EPS file for background instead of a PDF.
        // Letterhead-A4.eps is a sample EPS background.
        // Note that using EPS files as background requires the Expert edition of the PDF Printer.
        //backgroundFileName := baseFolder + '\ressources\letterhead-a4.pdf';

        //mergeBeforeFileName := baseFolder + '\ressources\Before.pdf';
        //mergeAfterFileName := baseFolder + '\ressources\After.pdf';

        counter := 0;
        Window.OPEN('generiere PDF zu Beleg ########1\\'+
                    'Dokumente generiert    ########2',DocNo,counter);
        WindowIsOpen := TRUE;

        IF NOT lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          lPrinterSelection.INIT;
          lPrinterSelection."User ID" := USERID;
          lPrinterSelection."Report ID" := ReportID;
          lPrinterSelection."Printer Name" := 'Bullzip PDF Printer';
          lPrinterSelection.INSERT;
          printerselection_inserted := TRUE;
        END ELSE BEGIN
            OriginalPrinter := lPrinterSelection."Printer Name";
            lPrinterSelection."Printer Name" := 'Bullzip PDF Printer';
            lPrinterSelection.MODIFY(TRUE);
        END;

        REPEAT

          Customer.GET(InvHeader."Bill-to Customer No.");
          IF Customer."Rech via EMail" = TRUE THEN BEGIN

            DocNo := InvHeader."No.";
            Window.UPDATE(1, DocNo);
            Window.UPDATE(2, counter);

            // Set file name for output file.
            pdfFileName := baseFolder + '\' + InvHeader."No." + '.pdf';

            // Delete old output file if it already exist.
            //IF EXISTS(pdfFileName) THEN ERASE(pdfFileName);

            // Multiple PDF printers could be installed.
            // Let the automation know which one to control.
            pdfSettings.printerName := pdfUtil.DefaultPrinterName;

            // Set output file name
            pdfSettings.SetValue('Output', pdfFileName);

            // Make sure no dialogs are shown during conversion.
            pdfSettings.SetValue('ShowSaveAs', 'never');
            pdfSettings.SetValue('ShowSettings', 'never');
            pdfSettings.SetValue('ShowPDF', 'no');
            pdfSettings.SetValue('ShowProgress', 'no');
            pdfSettings.SetValue('ShowProgressFinished', 'no');
            pdfSettings.SetValue('ConfirmOverwrite', 'no');

            // Set file name of status file to wait for.
            pdfSettings.SetValue('StatusFile', statusFileName);

            // Add a text watermark.
            //pdfSettings.SetValue('WatermarkText', 'PDF EXAMPLE - order ' + InvHeader."No.");
            //pdfSettings.SetValue('WatermarkColor', '#FF0000');
            //pdfSettings.SetValue('WatermarkVerticalPosition', 'top');
            //pdfSettings.SetValue('WatermarkHorizontalPosition', 'right');
            //pdfSettings.SetValue('WatermarkRotation', '90');
            //pdfSettings.SetValue('WatermarkOutlineWidth', '0.5');
            //pdfSettings.SetValue('WatermarkFontSize', '20');
            //pdfSettings.SetValue('WatermarkVerticalAdjustment', '5');
            //pdfSettings.SetValue('WatermarkHorizontalAdjustment', '1');

            // Add a background.
            // If a professional or expert license is installed the quality of the
            // background will improve.
            //pdfSettings.SetValue('Superimpose', backgroundFileName);
            //pdfSettings.SetValue('SuperimposeLayer', 'bottom');

            // Merge with other PDF files.
            //pdfSettings.SetValue('MergeFile', mergeBeforeFileName + '|.|' + mergeAfterFileName);

            // Sign with a digital certificate.
            //pdfSettings.SetValue('SignCertificate', certificateFileName);
            //pdfSettings.SetValue('SignPassword', certificatePassword);
            //pdfSettings.SetValue('ShowSignature', 'yes');

            // Do not show errors in PDF user interface.
            pdfSettings.SetValue('SuppressErrors', 'yes');

            // You can see more features and settings at
            // http://www.biopdf.com/guide/settings.php

            // Write settings to printer.
            // This writes a file name runonce.ini. It is a configuration that is used
            // for the next print job. The printer will delete the runonce.ini after it
            // is read.
            pdfSettings.WriteSettings(TRUE);

            IF EXISTS(statusFileName) THEN ERASE(statusFileName);

            InvHeader2.COPY(InvHeader);
            InvHeader2.SETRECFILTER;
            REPORT.RUNMODAL(ReportID, FALSE, FALSE, InvHeader2);

            IF pdfUtil.WaitForFile(statusFileName, 20000)  THEN BEGIN
              // Check status file for errors.
              IF pdfUtil.ReadIniString(statusFileName, 'Status', 'Errors', '') <> '0' THEN BEGIN
                ERROR('Error creating PDF. ' + pdfUtil.ReadIniString(statusFileName, 'Status', 'MessageText', ''));
              END;
            END ELSE BEGIN
              // The timeout elapsed. Something is wrong.
              ERROR('Error creating ' + pdfFileName)
            END;

            counter += 1;
            Window.UPDATE(2,counter);

          END;

        UNTIL (InvHeader.NEXT=0);
      END;

      IF printerselection_inserted THEN BEGIN
        IF lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          //lPrinterSelection."Printer Name" := pdfUtil.GetWindowsDefaultPrinterName;
          //lPrinterSelection.MODIFY;
          lPrinterSelection.DELETE;
        END;
      END ELSE BEGIN
        IF lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          lPrinterSelection."Printer Name" := OriginalPrinter;
          lPrinterSelection.MODIFY(TRUE);
        END;
      END;

      IF WindowIsOpen THEN
        Window.CLOSE;
      WindowIsOpen := FALSE;

      CLEAR(pdfSettings);
      CLEAR(pdfUtil);
    END;

    PROCEDURE BullzipPDF_PurchaseOrder@1140002(VAR PurchHeader@1140003 : Record 38;baseFolder@1140001 : Text[1000];ReportID@1140002 : Integer);
    VAR
      PurchHeader2@1140004 : Record 38;
    BEGIN
      //Auftragsbestâ€žtigungen per PDF

      CREATE(pdfSettings);
      CREATE(pdfUtil);
      printerselection_inserted := FALSE;
      OriginalPrinter := '';

      IF PurchHeader.FINDFIRST THEN BEGIN

        // The status file is used to check for errors and determine when the PDF is ready.
        statusFolder := ENVIRON('APPDATA') + '\Bullzip PDF';
        TOPAS_API.NewFolder(statusFolder);
        statusFileName := statusFolder + '\status.ini';

        // You can get a free test certificate at http://www.pdfpowertool.com
        //certificateFileName := baseFolder + '\ressources\certificate.pfx';
        //certificatePassword := 'password';
        // Set file name of background PDF.
        // Performance can be increased if you use an EPS file for background instead of a PDF.
        // Letterhead-A4.eps is a sample EPS background.
        // Note that using EPS files as background requires the Expert edition of the PDF Printer.
        //backgroundFileName := baseFolder + '\ressources\letterhead-a4.pdf';

        //mergeBeforeFileName := baseFolder + '\ressources\Before.pdf';
        //mergeAfterFileName := baseFolder + '\ressources\After.pdf';

        counter := 0;
        Window.OPEN('generiere PDF zu Beleg ########1\\'+
                    'Dokumente generiert    ########2',DocNo,counter);
        WindowIsOpen := TRUE;

        IF NOT lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          lPrinterSelection.INIT;
          lPrinterSelection."User ID" := USERID;
          lPrinterSelection."Report ID" := ReportID;
          lPrinterSelection."Printer Name" := 'Bullzip PDF Printer';
          lPrinterSelection.INSERT;
          printerselection_inserted := TRUE;
        END ELSE BEGIN
            OriginalPrinter := lPrinterSelection."Printer Name";
            lPrinterSelection."Printer Name" := 'Bullzip PDF Printer';
            lPrinterSelection.MODIFY(TRUE);
        END;

        REPEAT

          DocNo := PurchHeader."No.";
          Window.UPDATE(1, DocNo);
          Window.UPDATE(2, counter);

          // Set file name for output file.
          pdfFileName := baseFolder + '\' + PurchHeader."No." + '.pdf';

          // Delete old output file if it already exist.
          //IF EXISTS(pdfFileName) THEN ERASE(pdfFileName);

          // Multiple PDF printers could be installed.
          // Let the automation know which one to control.
          pdfSettings.printerName := pdfUtil.DefaultPrinterName;

          // Set output file name
          pdfSettings.SetValue('Output', pdfFileName);

          // Make sure no dialogs are shown during conversion.
          pdfSettings.SetValue('ShowSaveAs', 'never');
          pdfSettings.SetValue('ShowSettings', 'never');
          pdfSettings.SetValue('ShowPDF', 'no');
          pdfSettings.SetValue('ShowProgress', 'no');
          pdfSettings.SetValue('ShowProgressFinished', 'no');
          pdfSettings.SetValue('ConfirmOverwrite', 'no');

          // Set file name of status file to wait for.
          pdfSettings.SetValue('StatusFile', statusFileName);

          // Add a text watermark.
          //pdfSettings.SetValue('WatermarkText', 'PDF EXAMPLE - order ' +  PurchHeader."No.");
          //pdfSettings.SetValue('WatermarkColor', '#FF0000');
          //pdfSettings.SetValue('WatermarkVerticalPosition', 'top');
          //pdfSettings.SetValue('WatermarkHorizontalPosition', 'right');
          //pdfSettings.SetValue('WatermarkRotation', '90');
          //pdfSettings.SetValue('WatermarkOutlineWidth', '0.5');
          //pdfSettings.SetValue('WatermarkFontSize', '20');
          //pdfSettings.SetValue('WatermarkVerticalAdjustment', '5');
          //pdfSettings.SetValue('WatermarkHorizontalAdjustment', '1');

          // Add a background.
          // If a professional or expert license is installed the quality of the
          // background will improve.
          //pdfSettings.SetValue('Superimpose', backgroundFileName);
          //pdfSettings.SetValue('SuperimposeLayer', 'bottom');

          // Merge with other PDF files.
          //pdfSettings.SetValue('MergeFile', mergeBeforeFileName + '|.|' + mergeAfterFileName);

          // Sign with a digital certificate.
          //pdfSettings.SetValue('SignCertificate', certificateFileName);
          //pdfSettings.SetValue('SignPassword', certificatePassword);
          //pdfSettings.SetValue('ShowSignature', 'yes');

          // Do not show errors in PDF user interface.
          pdfSettings.SetValue('SuppressErrors', 'yes');

          // You can see more features and settings at
          // http://www.biopdf.com/guide/settings.php

          // Write settings to printer.
          // This writes a file name runonce.ini. It is a configuration that is used
          // for the next print job. The printer will delete the runonce.ini after it
          // is read.
          pdfSettings.WriteSettings(TRUE);

          IF EXISTS(statusFileName) THEN ERASE(statusFileName);

          PurchHeader2.COPY(PurchHeader);
          PurchHeader2.SETRECFILTER;
          REPORT.RUNMODAL(ReportID, FALSE, FALSE, PurchHeader2);

          IF pdfUtil.WaitForFile(statusFileName, 20000)  THEN BEGIN
            // Check status file for errors.
            IF pdfUtil.ReadIniString(statusFileName, 'Status', 'Errors', '') <> '0' THEN BEGIN
              ERROR('Error creating PDF. ' + pdfUtil.ReadIniString(statusFileName, 'Status', 'MessageText', ''));
            END;
          END ELSE BEGIN
            // The timeout elapsed. Something is wrong.
            ERROR('Error creating ' + pdfFileName)
          END;

          counter += 1;
          Window.UPDATE(2,counter);

        UNTIL (PurchHeader.NEXT=0);
      END;

      IF printerselection_inserted THEN BEGIN
        IF lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          //lPrinterSelection."Printer Name" := pdfUtil.GetWindowsDefaultPrinterName;
          //lPrinterSelection.MODIFY;
          lPrinterSelection.DELETE;
        END;
      END ELSE BEGIN
        IF lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          lPrinterSelection."Printer Name" := OriginalPrinter;
          lPrinterSelection.MODIFY(TRUE);
        END;
      END;

      IF WindowIsOpen THEN
        Window.CLOSE;
      WindowIsOpen := FALSE;

      CLEAR(pdfSettings);
      CLEAR(pdfUtil);
    END;

    PROCEDURE BullzipPDF_ServiceContract@1140003(VAR ShipHeader@1140000 : Record 110;baseFolder@1140001 : Text[1000];ReportID@1140002 : Integer);
    VAR
      Wartungsvertrag@1140004 : Record 50011;
      Servicepositionen@1140006 : Record 50024;
      wartungsnr_save@1140005 : ARRAY [2] OF Text[1024];
      vertrag_gedruckt@1140003 : Boolean;
    BEGIN
      //Servicevertrâ€žge per PDF

      CREATE(pdfSettings);
      CREATE(pdfUtil);
      printerselection_inserted := FALSE;
      OriginalPrinter := '';

      IF ShipHeader.FINDFIRST THEN BEGIN

        // The status file is used to check for errors and determine when the PDF is ready.
        statusFolder := ENVIRON('APPDATA') + '\Bullzip PDF';
        TOPAS_API.NewFolder(statusFolder);
        statusFileName := statusFolder + '\status.ini';

        // You can get a free test certificate at http://www.pdfpowertool.com
        //certificateFileName := baseFolder + '\ressources\certificate.pfx';
        //certificatePassword := 'password';
        // Set file name of background PDF.
        // Performance can be increased if you use an EPS file for background instead of a PDF.
        // Letterhead-A4.eps is a sample EPS background.
        // Note that using EPS files as background requires the Expert edition of the PDF Printer.
        //backgroundFileName := baseFolder + '\ressources\letterhead-a4.pdf';

        //mergeBeforeFileName := baseFolder + '\ressources\Before.pdf';
        //mergeAfterFileName := baseFolder + '\ressources\After.pdf';

        counter := 0;
        Window.OPEN('generiere PDF zu Beleg ########1\\'+
                    'Dokumente generiert    ########2',DocNo,counter);
        WindowIsOpen := TRUE;

        IF NOT lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          lPrinterSelection.INIT;
          lPrinterSelection."User ID" := USERID;
          lPrinterSelection."Report ID" := ReportID;
          lPrinterSelection."Printer Name" := 'Bullzip PDF Printer';
          lPrinterSelection.INSERT;
          printerselection_inserted := TRUE;
        END ELSE BEGIN
            OriginalPrinter := lPrinterSelection."Printer Name";
            lPrinterSelection."Printer Name" := 'Bullzip PDF Printer';
            lPrinterSelection.MODIFY(TRUE);
        END;

        REPEAT

          wartungsnr_save[1] := '';
          wartungsnr_save[2] := '';
          vertrag_gedruckt := FALSE;
          Customer.GET(ShipHeader."Sell-to Customer No.");
          IF Customer."Service via EMail" = TRUE THEN BEGIN
            Servicepositionen.RESET;
            Servicepositionen.SETFILTER(Art,'%1',Servicepositionen.Art :: Service);
            Servicepositionen.SETFILTER(Servicepositionen."Nr.",'%1',ShipHeader."No.");
            Servicepositionen.SETFILTER(Inaktiv,'%1',FALSE);
            IF Servicepositionen.FINDFIRST THEN BEGIN
              REPEAT
                IF (STRPOS(wartungsnr_save[1],Servicepositionen."Wartungsvertragsnr.") = 0)
                AND (STRPOS(wartungsnr_save[2],Servicepositionen."Wartungsvertragsnr.") = 0) THEN
                  vertrag_gedruckt := FALSE;
                IF vertrag_gedruckt = FALSE THEN BEGIN
                  Wartungsvertrag.RESET;
                  Wartungsvertrag.SETFILTER("Wartungsvertragsnr.",Servicepositionen."Wartungsvertragsnr.");
                  Wartungsvertrag.SETFILTER(Status,'<>%1&<>%2',Wartungsvertrag.Status :: ACTS,
                                            Wartungsvertrag.Status :: "Champs Partner");
                  IF Wartungsvertrag.FINDFIRST THEN BEGIN

                    DocNo := Wartungsvertrag."Wartungsvertragsnr.";
                    Window.UPDATE(1, DocNo);
                    Window.UPDATE(2, counter);

                    // Set file name for output file.
                    pdfFileName := baseFolder + '\' + Wartungsvertrag."Wartungsvertragsnr." + '.pdf';

                    // Delete old output file if it already exist.
                    //IF EXISTS(pdfFileName) THEN ERASE(pdfFileName);

                    // Multiple PDF printers could be installed.
                    // Let the automation know which one to control.
                    pdfSettings.printerName := pdfUtil.DefaultPrinterName;

                    // Set output file name
                    pdfSettings.SetValue('Output', pdfFileName);

                    // Make sure no dialogs are shown during conversion.
                    pdfSettings.SetValue('ShowSaveAs', 'never');
                    pdfSettings.SetValue('ShowSettings', 'never');
                    pdfSettings.SetValue('ShowPDF', 'no');
                    pdfSettings.SetValue('ShowProgress', 'no');
                    pdfSettings.SetValue('ShowProgressFinished', 'no');
                    pdfSettings.SetValue('ConfirmOverwrite', 'no');

                    // Set file name of status file to wait for.
                    pdfSettings.SetValue('StatusFile', statusFileName);

                    // Add a text watermark.
                    //pdfSettings.SetValue('WatermarkText', 'PDF EXAMPLE - order ' +  Wartungsvertrag."Wartungsvertragsnr.");
                    //pdfSettings.SetValue('WatermarkColor', '#FF0000');
                    //pdfSettings.SetValue('WatermarkVerticalPosition', 'top');
                    //pdfSettings.SetValue('WatermarkHorizontalPosition', 'right');
                    //pdfSettings.SetValue('WatermarkRotation', '90');
                    //pdfSettings.SetValue('WatermarkOutlineWidth', '0.5');
                    //pdfSettings.SetValue('WatermarkFontSize', '20');
                    //pdfSettings.SetValue('WatermarkVerticalAdjustment', '5');
                    //pdfSettings.SetValue('WatermarkHorizontalAdjustment', '1');

                    // Add a background.
                    // If a professional or expert license is installed the quality of the
                    // background will improve.
                    //pdfSettings.SetValue('Superimpose', backgroundFileName);
                    //pdfSettings.SetValue('SuperimposeLayer', 'bottom');

                    // Merge with other PDF files.
                    //pdfSettings.SetValue('MergeFile', mergeBeforeFileName + '|.|' + mergeAfterFileName);

                    // Sign with a digital certificate.
                    //pdfSettings.SetValue('SignCertificate', certificateFileName);
                    //pdfSettings.SetValue('SignPassword', certificatePassword);
                    //pdfSettings.SetValue('ShowSignature', 'yes');

                    // Do not show errors in PDF user interface.
                    pdfSettings.SetValue('SuppressErrors', 'yes');

                    // You can see more features and settings at
                    // http://www.biopdf.com/guide/settings.php

                    // Write settings to printer.
                    // This writes a file name runonce.ini. It is a configuration that is used
                    // for the next print job. The printer will delete the runonce.ini after it
                    // is read.
                    pdfSettings.WriteSettings(TRUE);

                    IF EXISTS(statusFileName) THEN ERASE(statusFileName);

                    REPORT.RUNMODAL(ReportID, FALSE, FALSE, Wartungsvertrag);

                    IF pdfUtil.WaitForFile(statusFileName, 20000)  THEN BEGIN
                      // Check status file for errors.
                      IF pdfUtil.ReadIniString(statusFileName, 'Status', 'Errors', '') <> '0' THEN BEGIN
                        ERROR('Error creating PDF. ' + pdfUtil.ReadIniString(statusFileName, 'Status', 'MessageText', ''));
                      END;
                    END ELSE BEGIN
                      // The timeout elapsed. Something is wrong.
                      ERROR('Error creating ' + pdfFileName)
                    END;

                    counter += 1;
                    Window.UPDATE(2,counter);

                    vertrag_gedruckt := TRUE;
                    IF STRLEN(wartungsnr_save[1] + Servicepositionen."Wartungsvertragsnr.") <= 1024 THEN
                      wartungsnr_save[1] := wartungsnr_save[1] + Servicepositionen."Wartungsvertragsnr."
                    ELSE
                    wartungsnr_save[2] := wartungsnr_save[2] + Servicepositionen."Wartungsvertragsnr.";

                  END;
                END;
              UNTIL Servicepositionen.NEXT = 0;
            END;
          END;
        UNTIL (ShipHeader.NEXT=0);
      END;

      IF printerselection_inserted THEN BEGIN
        IF lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          //lPrinterSelection."Printer Name" := pdfUtil.GetWindowsDefaultPrinterName;
          //lPrinterSelection.MODIFY;
          lPrinterSelection.DELETE;
        END;
      END ELSE BEGIN
        IF lPrinterSelection.GET(USERID,ReportID) THEN BEGIN
          lPrinterSelection."Printer Name" := OriginalPrinter;
          lPrinterSelection.MODIFY(TRUE);
        END;
      END;

      IF WindowIsOpen THEN
        Window.CLOSE;
      WindowIsOpen := FALSE;

      CLEAR(pdfSettings);
      CLEAR(pdfUtil);
    END;

    BEGIN
    END.
  }
}

